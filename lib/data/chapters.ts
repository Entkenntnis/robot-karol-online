// Auto-generated by pack.js - DO NOT EDIT MANUALLY
import { QuestData, OverviewMapData } from '../state/types'
import { deserializeQuestToData } from '../commands/json'

// Define chapter information from meta.json files
const chapterInfo = [
  {
    "id": 10001,
    "dirName": "000-intro",
    "title": "0. Einleitung",
    "originalTitle": "Einleitung",
    "description": "# Einleitung\r\n\r\nAuf deinem Weg zur Schule steht das Haus einer alten K√ºnstlerin. Sie sitzt oft im Garten und malt. Doch seit mehreren Tagen ist sie nicht mehr zu sehen und die Balkont√ºr steht weit offen.\r\n\r\nNach einer Woche h√§ltst du es nicht mehr aus. Du entscheidest dich, der Sache auf den Grund zu gehen. Du nimmst deinen Mut zusammen, kletterst √ºber den Zaun und schaust vorsichtig in das Haus rein. Alles ruhig. Du betrittst √ºber die T√ºr die K√ºche und schaust dich weiter um.\r\n\r\nAls du das Wohnzimmer betrittst, bleibt dir die Luft weg. Im ganzen Raum verteilt stehen leuchtende Leinw√§nde. Was ist das f√ºr eine Technologie? Sie zeigen abstrakte Muster und Farben.\r\n\r\n\"Oh, ich bin so froh, dass du hier bist.\", ert√∂nt eine Stimme. Du st√∂√üt einen Schrei aus. Auf einer Leinwand erscheint eine Figur, die mit dir redet.\r\n\r\n\"Ich bin Karol, die K√ºnstlerin. Diese Leinw√§nde sind sehr gef√§hrlich. Ich wurde gewarnt, aber ich war zu neugierig. Ich habe sie nat√ºrlich sofort ausprobiert. Jetzt bin ich hier drinnen gefangen und komme nicht mehr raus. W√§rst du bereit, mir ein wenig in meiner misslichen Lage zu helfen?\"\r\n",
    "image": "/story/0.jpg",
    "quests": [],
    "x": 890,
    "y": 1580
  },
  {
    "id": 10002,
    "dirName": "010-variablen",
    "title": "1. Variablen",
    "originalTitle": "Variablen",
    "description": "# üéì Kapitel 1: Variablen\r\n\r\nDu erkl√§rst dich bereit, der alten Dame zu helfen. Du hast heute Nachmittag sowieso noch nichts vor, warum nicht ein kleines Abenteuer erleben? Karol ist sichtlich erleichtert und f√§ngt an zu erz√§hlen:\r\n\r\n\"Diese Leinw√§nde sind eine Verbindungn aus Quantentechnik und AI. Sie wurden entwickelt, um eine neue Form des Lernens zu erm√∂glichen. Doch es gibt gef√§hrliche Nebeneffekte, daher hat man das Projekt gestoppt.\"\r\n\r\nDein Kopf schwirrt. \"Was haben die Leinw√§nde mit Lernen zu tun?\"\r\n\r\nKarol l√§chelt geheimnisvoll. \"Komm, ich zeige es dir. Siehst du die Tastatur? Tippe diesen Befehl ein und dr√ºcke Enter.\"\r\n\r\n```py\r\nmuster_farbe = \"rot\"\r\n```\r\n\r\nEs ist ungewohnt, auf einer Leinwand zu tippen. Als du die Eingabe abschickst, passiert etwas Magisches: Die Muster auf der Leinwand f√§rben sich rot.\r\n\r\n\"Damit ist es noch nicht genug, mache weiter mit diesem Befehl:\"\r\n\r\n```py\r\nanimation_geschwindigkeit = 200\r\n```\r\n\r\nDu tippst es ein und sofort fangen die Muster an im hohen Tempo herumzuwirbeln. Deine Augen schmerzen und du tippst instinktiv `animation_geschwindigkeit = 0`. Pl√∂tzlich bleibt alles stehen.\r\n\r\n\"Sehr gut! Du hast das System verstanden! Es wurde entwickelt, um dir die Grundlagen von Python auf eine lebendige Art zu vermitteln. Es ist sehr m√§chtig ... vielleicht etwas zu m√§chtig. Ich vermute, dass ich erst freikomme, wenn wir alle Kapitel bearbeitet haben. Leider kann ich selber keinen Code eintippen. Ich kann dir aber aus der Anleitung vorlesen und du bearbeitest die Aufgaben. Klingt das nach einem Deal?\"\r\n\r\nOh nein, es geht ums Lernen! Aber du kannst die alte Dame jetzt nicht h√§ngen lassen, zumal die Leinw√§nde schon ziemlich cool sind. Also nickst du.\r\n\r\n## Datentypen im √úberblick\r\n\r\n\"Was du vorhin gemacht hast ist eine _Wertzuweisung_ auf eine Variable:\r\n\r\n```\r\n<Name der Variable> = <Wert>\r\n```\r\n\r\nKeine Sorge, Variablen in Python sind viel einfacher als Variablen in der Mathematik. Sie speichern nur Informationen - du musst sie nicht umformen oder so. Es gibt Variablen in verschiedenen Typen, je nach dem, was f√ºr eine Information du speichern willst:\r\n\r\n### 1. Strings - F√ºr Text\r\n\r\nNutze doppelte Anf√ºhrungszeichen.\r\n\r\n```python\r\nname = \"Max\"\r\n```\r\n\r\n### 2. Integer - Ganze Zahlen\r\n\r\n```python\r\nalter = 12\r\nklassenstufe = 7\r\n```\r\n\r\n### 3. Float - Kommazahlen\r\n\r\nVerwende als Dezimaltrenner einen Punkt.\r\n\r\n```python\r\nnote = 2.3\r\npi = 3.14159\r\n```\r\n\r\n### 4. Boolean - Wahrheitswerte\r\n\r\n```python\r\nhat_ge√ºbt = True\r\nist_ferien = False\r\n```\r\n\r\n## üîÑ Variablen ver√§ndern\r\n\r\nDu kannst Werte jederzeit √§ndern:\r\n\r\n```python\r\npunkte = 10\r\nprint(punkte)  # Ausgabe: 10\r\n\r\npunkte = 15    # Neuer Wert\r\nprint(punkte)  # Ausgabe: 15\r\n```\r\n\r\nDie grauen Text hinter dem `#` (Hashtag) sind _Kommentare_. Sie erkl√§ren den Code und d√ºrfen in normaler Sprache geschrieben werden.\r\n\r\n## üö´ Verbotene Namen\r\n\r\nDu darfst die Variablenamen fast beliebig w√§hlen. Ein paar wenige Sachen sind nicht erlaubt:\r\n\r\n```python\r\n2pac = \"Rapper\"    # Zahl am Anfang geht nicht\r\nmein-name = \"Lena\" # Bindestrich nicht erlaubt\r\nclass = 8B         # Schl√ºsselw√∂rter verboten\r\n```\r\n\r\nAchte bei den Variablenamen auf Gro√ü- und Kleinschreibung! Diese machen einen Unterschied und `alter` ist eine andere Variable als `ALTER`.\r\n\r\n## ‚öõÔ∏è Quantenknoten\r\n\r\nDas wars bisher an Theorie, mehr steht hier nicht drin. Aber das ist ja schon einiges. Wenn du auf _Weiter_ klickst, √∂ffnen sich mehrere Quantenknoten. Dort findest du die Aufgaben. Viel Erfolg beim L√∂sen und wir sehen uns im zweiten Kapitel wieder.\"\r\n",
    "image": "/story/1.jpg",
    "quests": [
      {
        "filename": "Raumschiffvorbereitung.json",
        "x": 540,
        "y": 30,
        "id": 114,
        "content": {
          "version": "v1",
          "title": "Raumschiffvorbereitung",
          "description": "In diesem Quantenknoten dreht sich alles um die Steuerung eines Raumschiffs! Initialisiere die Variablen f√ºr die Startfreigabe.\n\n- `treibstoff`: Ganzzahl mit 10000 Litern\n- `sauerstoff`: Ganzzahl mit 500 Einheiten\n- `antriebsleistung`: Kommazahl 3.5\n- `system_aktiv`: Wahrheitswert True",
          "tasks": [
            {
              "title": "Systeminitialisierung",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 2,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 6,
                  "data": [
                    [
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 2,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 6,
                  "data": [
                    [
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Bereit f√ºr den Start des Raumschiffs?\", \"Los geht's\")\n\n__ide_run_client()\n\nchecks = [\n    ('treibstoff', int, 10000, \"Ganzzahl\"),\n    ('sauerstoff', int, 500, \"Ganzzahl\"),\n    ('antriebsleistung', float, 3.5, \"Kommazahl\"),\n    ('system_aktiv', bool, True, \"Wahrheitswert\")\n]\n\nfor var, typ, wert, name in checks:\n    if var not in globals():\n        __ide_prompt(f'Variable `{var}` fehlt!', 'Beenden')\n        __ide_exit()\n\n    if not isinstance(globals()[var], typ):\n        __ide_prompt(f'Falscher Typ f√ºr `{var}`: Erwartet {name}.', 'Beenden')\n        __ide_exit()\n\n    if globals()[var] != wert:\n        __ide_prompt(f'Variable `{var}` ist {globals()[var]} statt {wert}', 'Beenden')\n        __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Alle Systeme gr√ºn! Startfreigabe erteilt üöÄ', 'Mission starten')",
          "language": "python-pro",
          "program": "# Setze die Systemvariablen korrekt\n\ntreibstoff = 9000\nsauerstoff = \"500\"\nantriebsleistung = 3\nsystem_aktiv = False\n"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Zaubertrank_brauen.json",
        "x": 428,
        "y": 144,
        "id": 115,
        "content": {
          "version": "v1",
          "title": "Zaubertrank brauen",
          "description": "Bereite einen m√§chtigen Zaubertrank vor. Initialisiere die Variablen mit den richtigen Werten und Typen.\n\n- `eulenfedern`: Ganzzahl mit 5 Federn\n- `mondstaub`: Kommazahl 2.5 Gramm\n- `drachenblut`: Text \"3 Tropfen\"\n- `kessel_heiss`: Wahrheitswert True",
          "tasks": [
            {
              "title": "Zutaten vorbereiten",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      1,
                      1,
                      0,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      1,
                      1,
                      0,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Bist du bereit f√ºr die Zaubertrank-Herstellung?\", \"Zutaten mischen\")\n\n__ide_run_client()\n\nzutaten_checks = [\n    ('eulenfedern', int, 5, \"Ganzzahl\"),\n    ('mondstaub', float, 2.5, \"Kommazahl\"),\n    ('drachenblut', str, \"3 Tropfen\", \"Text in Anf√ºhrungszeichen\"),\n    ('kessel_heiss', bool, True, \"Wahrheitswert\")\n]\n\nfor var, typ, wert, hinweis in zutaten_checks:\n    if var not in globals():\n        __ide_prompt(f'Zutat fehlt: `{var}` nicht gefunden!', 'Nochmal versuchen')\n        __ide_exit()\n    \n    if not isinstance(globals()[var], typ):\n        __ide_prompt(f'Falsche Zubereitung: {var} sollte {hinweis} sein', 'Rezept pr√ºfen')\n        __ide_exit()\n    \n    if globals()[var] != wert:\n        __ide_prompt(f'{var} ist {globals()[var]} statt {wert}!', 'Menge anpassen')\n        __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Der Kessel brodelt! Magischer Trank erfolgreich gebraut! ‚ú®', 'Trank testen')",
          "language": "python-pro",
          "program": "# Korrigiere die Zutatenangaben\n\neulenfedern = 5.0\nmondstaub = 2\ndrachenblut = 3\nkessel_heiss = \"True\"\n"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Drei_W_nsche.json",
        "x": 620,
        "y": 184,
        "id": 117,
        "content": {
          "version": "v1",
          "title": "Drei W√ºnsche",
          "description": "Wenn du drei W√ºnsche h√§ttest, wie w√ºrden sie lauten? Es gib nur diese Bedingungen:\n\n- Es m√ºssen genau drei W√ºnsche sein, nicht mehr und nicht weniger.\n- Jeder Wunsch ist eine Wertzuweisung auf eine Variable wie `kontostand_in_euro = 1000000`.\n- Jeder Wunsch nutzt einen anderen Datentyp.",
          "tasks": [
            {
              "title": "Sternschnuppe",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 1,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 6,
                  "dir": "east"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 1,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Hast du deine W√ºnsche notiert?\", \"Simsalabim\")\n\n__ide_run_client()\n\n# Variablen sammeln (ohne Systemvariablen)\nuser_vars = [v for v in globals() if not v.startswith('__ide_') and v != '__builtins__' and v != 'Robot']\n\ntypen = [type(globals()[v]).__name__ for v in user_vars]\n\nerforderliche_typen = {'int', 'float', 'str', 'bool'}\n\nif len(user_vars) != 3:\n    __ide_prompt(f'‚ùå Falsche Anzahl W√ºnsche: {len(user_vars)} statt 3', 'Nochmal versuchen')\n    __ide_exit()\n\nif len(set(typen)) < 3:\n    doppelte = [t for t in ['int','float','str', 'bool'] if typen.count(t) > 1]\n    __ide_prompt(f'‚ùå Doppelte Datentypen: {\", \".join(doppelte)}', 'Typen pr√ºfen')\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Das klingt wunderbar Ÿ©(^‚Äø^)€∂ Deine W√ºnsche wurden an das Quantensystem weitergeleitet.')",
          "language": "python-pro",
          "program": "# Notiere deine drei W√ºnsche:\n\n"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Quiz.json",
        "x": 777,
        "y": 210,
        "id": 118,
        "content": {
          "version": "v1",
          "title": "Quiz",
          "description": "Dein Allgemeinwissen ist gefragt. Weise diesen drei Variablen den richtigen Wert zu:\n\n- `hauptstadt_deutschland`\n- `ende_des_zweiten_weltkriegs`\n- `ein_viertel_als_dezimalzahl`\n\nW√§hle jeweils einen passenden Datentyp. Achte auf Gro√ü-/Kleinschreibung.",
          "tasks": [
            {
              "title": "Quiz",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Bereit f√ºr das Quiz?\", \"Quiz starten\")\n\n__ide_run_client()\n\nquiz_checks = [\n    ('hauptstadt_deutschland', str, \"Berlin\", \"Text in Anf√ºhrungszeichen\"),\n    ('ende_des_zweiten_weltkriegs', int, 1945, \"Ganzzahl\"),\n    ('ein_viertel_als_dezimalzahl', float, 0.25, \"Kommazahl\")\n]\n\nfehler = 0\nresultate = []\n\nfor var, typ, wert, hinweis in quiz_checks:\n    if var not in globals():\n        resultate.append(f'‚ùå Variable `{var}` fehlt!\\n\\n')\n        fehler += 1\n        continue\n    \n    if not isinstance(globals()[var], typ):\n        resultate.append(f'‚ùå `{var}` hat nicht den richtigen Datentyp\\n\\n')\n        fehler += 1\n        continue\n    \n    if globals()[var] != wert:\n        resultate.append(f'‚ùå `{var}` hat den falschen Wert: {globals()[var]}\\n\\n')\n        fehler += 1\n        continue\n        \n    resultate.append(f'‚úÖ `{var}` ist korrekt!\\n\\n')\n\nif fehler > 0:\n    message = \"\\n\".join(resultate)\n    __ide_prompt(f'Es gibt noch {fehler} Fehler:\\n\\n{message}', 'Nochmal versuchen')\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Super! üéâ Alle Fragen wurden richtig beantwortet!', 'Fertig')",
          "language": "python-pro",
          "program": "# Schreibe hier deine Antworten auf"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Hin_und_her.json",
        "x": 850,
        "y": 90,
        "id": 116,
        "content": {
          "version": "v1",
          "title": "Hin und her",
          "description": "Es herrscht Chaos. Die Variablen wurden ohne erkennbares System hin und her gesetzt.\n\nSchaue dir das Script an und finde heraus, welchen Wert die Variable `erde` am Ende des Programms hat. Wenn du die Antwort wei√üt, dann klicke auf Start.",
          "tasks": [
            {
              "title": "Ein Durcheinander",
              "start": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      1,
                      0,
                      3,
                      0
                    ],
                    [
                      2,
                      0,
                      0,
                      1,
                      3
                    ],
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      1,
                      0,
                      3,
                      0
                    ],
                    [
                      2,
                      0,
                      0,
                      1,
                      3
                    ],
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"In diesem Programm werden Variablen wild gesetzt. Hast du noch den Durchblick?\", \"Klar\")\n\nergebnis = input(\"Welchen Wert hat am Ende des Programms die Variable Erde?\")\n\nif ergebnis != \"hase\":\n    __ide_prompt(\"Das ist leider nicht die richtige Antwort.\", \"Nochmal\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(\"erde = himmel, himmel = blau, blau = a, a = \\\"hase\\\" - so beh√§ltst du den √úberblick :)\")",
          "language": "python-pro",
          "program": "a = \"hase\"\nb = \"fuchs\"\nc = \"eule\"\n\nrot = c\ngr√ºn = b\nblau = a\n\nhimmel = a\nerde = rot\nhimmel = blau\nerde = himmel\n\n# Welchen Wert hat `erde` hier?"
        },
        "deps": [
          10002
        ]
      }
    ],
    "x": 710,
    "y": 1640
  },
  {
    "id": 10003,
    "dirName": "020-eingabe-ausgabe",
    "title": "2. Interaktionen",
    "originalTitle": "Interaktionen",
    "description": "# üí¨ Kapitel 2: Interaktionen\r\n\r\n\"Wir kommen voran!\", feiert Karol. \"Mal sehen, was uns als N√§chstes erwartet.\" Sie verschwindet f√ºr ein paar Minuten in der Leinwand. Du nutzt die Zeit, dich ein wenig in ihrem Wohnzimmer umzusehen. Du bist √ºberrascht, dass einige der Gem√§lde von Karol sehr kindlich aussehen.\r\n\r\n\"Was f√ºr Kunst machst du eigentlich?\", fragst du, als Karol wieder erscheint. Die alte Dame antwortet mit einem Grinsen: \"Haha, das ist eine komplizierte Sache. Aber aktuell male ich Bilder, die ich an Schulen schenke, um die Kinder dort ein wenig zu inspirieren...\"\r\n\r\nKarol schaut f√ºr einen kurzen Moment vertr√§umt in die Ferne, dann findet sie sich wieder: \"Ich hab mir das Kapitel angeschaut, es wird interaktiv, denn du lernst, wie du Texte anzeigen und auf Eingaben reagieren kannst.\r\n\r\n## 1. Die `print()`-Funktion ‚Äì sprich mit der Welt!\r\n\r\nMit `print()` kannst du alles ausgeben ‚Äì Texte, Zahlen oder Variablen.\r\n\r\n```python\r\nprint(\"Hallo Welt! üåç\")\r\n\r\nprint(42)\r\n\r\nalter = 17\r\nprint(alter)\r\n```\r\n\r\n## 2. Mit `f-Strings` Texte bauen\r\n\r\nH√§ufig wollen wir Informationen in einen netten Text verpacken. Dazu sind _f-Strings_ sehr hilfreich, denn damit kannst du Text mit Variablen und anderen Daten mischen. Nutze geschweifte Klammern `{}` als Platzhalter und schreibe dazwischen eine Variable. Dann wird der Wert an diese Stelle in den Text eingef√ºgt:\r\n\r\n```py\r\nanzahl = \"4\"\r\nfarbe = \"rot\"\r\n\r\nprint(f\"Da sind {anzahl} Autos mit der Farbe {farbe}.\")\r\n\r\n# -> Da sind 4 Autos mit der Farbe rot.\r\n```\r\n\r\n## 3. Die `input()`-Funktion ‚Äì stelle Fragen!\r\n\r\nSo holst du dir Eingaben vom Benutzer ab:\r\n\r\n```python\r\n# Einfache Eingabe\r\nname = input(\"Wie hei√üt du? \")\r\n\r\nprint(f\"Hallo, {name}! üòä\")\r\n```\r\n\r\n## 4. Typumwandlung ‚Äì mach aus Text eine Zahl\r\n\r\nUm eine Zahl abzufragen, verpacke die Eingabe in die Funktion `int()`. Diese wandelt einen Text in eine Zahl um:\r\n\r\n```python\r\n# String zu Integer\r\ngeburtsjahr = int(input(\"Geburtsjahr: \"))\r\n\r\naktuelles_jahr = 2025\r\nalter = aktuelles_jahr - geburtsjahr\r\nprint(f\"Du bist etwa {alter} Jahre jung! üéÇ\")\r\n```\r\n\r\n## üí° Wichtigste Erkenntnisse\r\n\r\n- `print()` gibt aus, `input()` liest ein (immer als String!)\r\n- `f-Strings` sind besonders n√ºtzlich f√ºr zusammengesetzte Texte\r\n- Mit `int()` machst aus Texten Ganzzahlen\r\n\r\nJetzt kannst du schon richtige Dialoge mit deinem Programm f√ºhren! Probiere dich gleich an den Aufgaben aus! üéÆüí¨\"\r\n",
    "image": "/story/2.jpg",
    "quests": [
      {
        "filename": "Systemstatus.json",
        "x": 160,
        "y": -70,
        "id": 119,
        "content": {
          "version": "v1",
          "title": "Systemstatus",
          "description": "Beim Start der Rakete m√ºssen Temperatur und Geschwindigkeit eng beobachtet werden.\n\nErsetze `X` und `Y` mit  `{}`-Klammern und setze die passende Variable ein. So soll eine Ausgabe aussehen:\n\n**Triebwerkstemperatur: 555 ¬∞C, Geschwindigkeit: 423 km/h**",
          "tasks": [
            {
              "title": "Instrumentenanzeige",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 3,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 2,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      true
                    ],
                    [
                      false,
                      true
                    ],
                    [
                      true,
                      false
                    ],
                    [
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 3,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 2,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      true
                    ],
                    [
                      false,
                      true
                    ],
                    [
                      true,
                      false
                    ],
                    [
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"T minus 3, 2, 1, ...\", \"Start\")\n\nts = [0, 500, 800, 1100, 1300, 1500, 1665, 1780, 1990, 2102]\n\nvs = [0, 10, 26, 45, 56, 78, 98, 135, 180, 240]\n\nfor i in range(10):\n    t = ts[i]\n    v = vs[i]\n    def ladeTemperatur():\n        return t\n\n    def ladeGeschwindigkeit():\n        return v\n\n    __ide_run_client(globals=[\"ladeTemperatur\", \"ladeGeschwindigkeit\"])\n\n    lastOutput = __ide_get_outputs()[-1].strip()\n    expected = f\"Triebwerkstemperatur: {t} ¬∞C, Geschwindigkeit: {v} km/h\"\n    if lastOutput != expected:\n        __ide_prompt(\"Statusanzeige fehlerhaft, Messwerte wurden nicht richtig dargestellt.\", \"Korrigieren\")\n        __ide_exit()\n\n    __ide_sleep(0.3)\n\n__ide_set_progress(True)\n__ide_prompt(\"Start erfolgreich üöÄ\")",
          "language": "python-pro",
          "program": "temperatur = ladeTemperatur()\n\ngeschwindigkeit = ladeGeschwindigkeit()\n\nprint(f\"Triebwerkstemperatur: X ¬∞C, Geschwindigkeit: Y km/h\")"
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Runen.json",
        "x": 190,
        "y": 70,
        "id": 120,
        "content": {
          "version": "v1",
          "title": "Runen",
          "description": "In einer magischen Beschw√∂rung m√ºssen  X mit dem Wert der Variable `rune` ersetzt werden. Sei vorsichtig und l√∂sche keine der Tilden.",
          "tasks": [
            {
              "title": "magische Rune",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "runes = [' ‚úø⁄ø⁄∞€£‚Äî ', '(=^ÔΩ•ÔΩ™ÔΩ•^=))ÔæâÂΩ°‚òÜ', '\t„ÉΩ(ÔΩÄ–î¬¥)‚äÉ‚îÅ‚òÜÔæü. * ÔΩ• ÔΩ°Ôæü,']\n\n__ide_prompt(\"Die gro√üe Beschw√∂rung steht bevor.\", \"Runen einsetzen\")\n\n\nfor rune in runes:\n    def ladeRune():\n        return rune\n    __ide_run_client(globals=[\"ladeRune\"])\n    lastOutput = __ide_get_outputs()[-1].strip()\n    expected = f\"~~~~~~~{rune}~~~~~{rune}~~~~~{rune}~~~~\"\n    if lastOutput != expected:\n        __ide_prompt(\"Beschw√∂rung fehlgeschlagen üí•\", \"Korrigieren\")\n        __ide_exit()\n    __ide_sleep(0.8)\n\n__ide_set_progress(True)\n__ide_prompt(\"Danke f√ºr die Unterst√ºtzung!\", \"Gerne\")",
          "language": "python-pro",
          "program": "rune = ladeRune()\n\nprint(f\"~~~~~~~X~~~~~X~~~~~X~~~~\")"
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Begr√º√üung.json",
        "x": 560,
        "y": 57,
        "id": 121,
        "content": {
          "version": "v1",
          "title": "Begr√º√üung",
          "description": "Eine pers√∂nliche Begr√º√üung f√ºhlt sich doch gleich viel w√§rmer an. Erg√§nze das Script:\n\n- Frage mit `input()` den Namen ab und weise den Wert einer Variable zu\n- Gib eine Begr√º√üung aus, nutze einen f-string.",
          "tasks": [
            {
              "title": "Ein L√§cheln",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Probieren wir das Script aus.\", \"Begegnung starten\")\n\n__ide_run_client()\n\n# Pr√ºfe Eingabe √ºber input()\ninputs = __ide_get_inputs()\nif len(inputs) == 0:\n    __ide_prompt(\"Du musst den Namen mit `input()` abfragen.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Extrahiere den eingegebenen Namen\nname = inputs[0]\n\n# Pr√ºfe Ausgabe\noutputs = __ide_get_outputs()\nif len(outputs) == 0:\n    __ide_prompt(\"Du hast keine Begr√º√üung ausgegeben. Nutze einen f-string mit `print()`.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Pr√ºfe, ob der Name in der Ausgabe verwendet wurde\nlast_output = outputs[-1].strip()\nif name not in last_output:\n    __ide_prompt(f\"Deine Begr√º√üung enth√§lt nicht den Namen '{name}'. Nutze einen f-string, der den Namen einbaut.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n\n__ide_set_progress(True)\n__ide_prompt(f\"Super! Du hast {name} erfolgreich mit einem f-string begr√º√üt!\", \"Weiter\")",
          "language": "python-pro",
          "program": "\nname = \"\" # TODO: ersetze mit input(\"Wie lautet dein Name?\")\n\nprint(f\"...\") # TODO: antworte den Namen, z.B. Hi, X!\n"
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Harry_Potter_Fan.json",
        "x": 330,
        "y": 148,
        "id": 122,
        "content": {
          "version": "v1",
          "title": "Harry Potter Fan",
          "description": "Alle Harry Potter Fans aufgepasst: Schreibe ein Script, dass drei bekannte Tatsachen abfragt. Nutze f√ºr jede Tatsache einmal `input` und speichere die Informationen in den passenden Variablen.\n\nAchte bei der dritten Tatsache darauf, die Eingabe mit `int(input())` in eine Ganzzahl umzuwandeln.\n\n> 7 - ∆Éƒ± çp«ùH - …•…î áƒ±ppƒ±n·Ωâ :u«ù án…ê◊ü u«ù á…πo ç áu‚àÄ «ùƒ±·ó°",
          "tasks": [
            {
              "title": "Initialien",
              "start": {
                "dimX": 8,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen im Zaubererquiz!\", \"Accio Fragen!\")\n\n__ide_run_client()\n\n# √úberpr√ºfe die Anzahl der Eingaben\ninputs = __ide_get_inputs()\nif len(inputs) < 3:\n    __ide_prompt(\"Du hast nicht alle drei Fragen gestellt. Nutze dreimal `input()`.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# √úberpr√ºfe die Variablen im Client-Code\nvars_to_check = ['sport', 'name_harrys_eule', 'anzahl_horkruxe']\nmissing_vars = []\n\nfor var in vars_to_check:\n    if var not in globals():\n        missing_vars.append(var)\n\nif missing_vars:\n    __ide_prompt(f\"Es fehlen folgende Variablen: {', '.join(missing_vars)}\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# √úberpr√ºfe die Datentypen\nif not isinstance(sport, str):\n    __ide_prompt(\"Die Variable 'sport' sollte ein String sein.\", \"Nochmal versuchen\")\n    __ide_exit()\n    \nif not isinstance(name_harrys_eule, str):\n    __ide_prompt(\"Die Variable 'name_harrys_eule' sollte ein String sein.\", \"Nochmal versuchen\")\n    __ide_exit()\n    \nif not isinstance(anzahl_horkruxe, int):\n    __ide_prompt(\"Die Variable 'anzahl_horkruxe' sollte eine Ganzzahl sein. Hast du int(input()) verwendet?\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Optionale √úberpr√ºfung der korrekten Antworten\nif sport.lower() == \"quidditch\" and name_harrys_eule.lower() == \"hedwig\" and anzahl_horkruxe == 7:\n    __ide_prompt(\"Perfekt! Du bist ein echter Harry Potter Fan! ‚ö°\", \"Wingardium Leviosa!\")\nelse:\n    __ide_prompt(\"Dein Code funktioniert, aber √ºberpr√ºfe nochmal deine Antworten. Die Hinweise stehen √ºbrigens auf dem Kopf in der Aufgabenstellung. üòâ\", \"Ok\")\n\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Beispiel\nsport = input(\"Welche Sportart ist zentral f√ºr Harry Potter?\")\n\n# TODO\n# name_harrys_eule = \n\n# anzahl_horkruxe = "
        },
        "deps": [
          10003
        ]
      }
    ],
    "x": 380,
    "y": 1930
  },
  {
    "id": 10004,
    "dirName": "030-bedingte-anweisungen",
    "title": "3. Bedingte Anweisungen",
    "originalTitle": "Bedingte Anweisungen",
    "description": "# üß† Kapitel 3: Dein Code wird schlau! Mit Bedingungen entscheiden lernen\r\n\r\n\"Dein Erfolg bei den bisherigen Aufgaben ist beeindruckend!\", freut sich Karol. Du bemerkst, dass die Muster auf den Leinw√§nden sich ver√§ndert haben ‚Äì sie wirken jetzt dynamischer, als w√ºrden sie auf etwas reagieren.\r\n\r\n\"Etwas stimmt nicht...\", murmelt Karol besorgt. \"Die Leinw√§nde m√ºssten sich √∂ffnen, aber es passiert nichts. Ich habe den Verdacht, dass die Quantensysteme eine Sicherheitspr√ºfung durchf√ºhren.\" Sie schaut dich hoffnungsvoll an. \"Deine Hilfe ist jetzt wichtiger denn je! Wir m√ºssen dem System beibringen, kluge Entscheidungen zu treffen.\"\r\n\r\nIhre Stimme wird ernst: \"In der Programmierung ist das ein entscheidender Schritt: deinem Code beizubringen, verschiedene Situationen zu erkennen und entsprechend zu handeln. Genau wie ein Zauberlehrling wissen muss, wann der Kessel die richtige Temperatur hat, oder eine Wetterstation erkennen muss, wann ein Sturm aufzieht.\"\r\n\r\n## üö¶ If-Statement: Die Grundlage aller Entscheidungen\r\n\r\nKarol projiziert ein einfaches Beispiel auf die Leinwand:\r\n\r\n```python\r\nampelfarbe = \"gr√ºn\"\r\n\r\nif ampelfarbe == \"gr√ºn\":\r\n    print(\"Losfahren! üöó\")\r\n```\r\n\r\n\"Das ist wie eine Verzweigung auf deinem Weg\", erkl√§rt sie. \"Der Code fragt: 'Ist die Ampel gr√ºn?' Wenn ja, dann fahre los. Wenn nicht, dann mache... nichts in diesem Beispiel.\"\r\n\r\nüëâ **So funktioniert's:**\r\n\r\n- `if` = \"falls\" oder \"wenn\"\r\n- `==` pr√ºft auf Gleichheit (Achtung: nicht verwechseln mit `=`, das ist f√ºr Zuweisungen!)\r\n- Der einger√ºckte Code wird **nur** ausgef√ºhrt, wenn die Bedingung wahr ist\r\n- Die Einr√ºckungen (4 Leerzeichen) sind in Python Pflicht ‚Äì sie zeigen, welcher Code zur Bedingung geh√∂rt\r\n\r\n## üöß Else: Der \"Alles andere\"-Fall\r\n\r\n\"Aber was, wenn die Ampel **nicht** gr√ºn ist?\", fragt Karol. Die Leinwand ver√§ndert sich und zeigt ein erweitertes Beispiel:\r\n\r\n```python\r\nalter = 15\r\n\r\nif alter >= 18:\r\n    print(\"Du darfst w√§hlen! üó≥Ô∏è\")\r\nelse:\r\n    # Wird ausgef√ºhrt, weil 15 < 18\r\n    print(\"Noch etwas Geduld... üïí\")\r\n```\r\n\r\n\"Mit `else` hast du einen Plan B! Wenn die Bedingung nicht zutrifft, wird stattdessen der Code im `else`-Block ausgef√ºhrt. So hat dein Programm f√ºr jede Situation eine Antwort.\"\r\n\r\n## üîÑ Elif: F√ºr komplexe Entscheidungen\r\n\r\n\"Manchmal gibt es mehr als nur zwei M√∂glichkeiten\", sagt Karol und zaubert ein neues Beispiel hervor:\r\n\r\n```python\r\nnote = 2.3\r\n\r\nif note == 1.0:\r\n    print(\"Traumnote! üåü\")\r\nelif note <= 2.0:\r\n    print(\"Super gemacht! üëç\")\r\nelif note <= 3.0:\r\n    # Wird ausgef√ºhrt, weil 2.3 <= 3.0\r\n    print(\"Gut, geht besser üòä\")\r\nelse:\r\n    print(\"Da m√ºssen wir √ºben! üí™\")\r\n```\r\n\r\n\"Mit `elif` (kurz f√ºr 'else if') kannst du mehrere Bedingungen nacheinander pr√ºfen. Sobald eine davon zutrifft, wird der zugeh√∂rige Code ausgef√ºhrt und die restlichen Bedingungen werden √ºbersprungen.\"\r\n\r\n## üîç Vergleichsoperatoren ‚Äì Unsere Werkzeuge\r\n\r\n\"Um Entscheidungen zu treffen, brauchst du die richtigen Werkzeuge\", erkl√§rt Karol und l√§sst eine Tabelle erscheinen:\r\n\r\n| Operator | Bedeutung      | Beispiel        |\r\n| -------- | -------------- | --------------- |\r\n| `==`     | gleich         | `5 == 5` ‚Üí True |\r\n| `!=`     | ungleich       | `3 != 5` ‚Üí True |\r\n| `>`      | gr√∂√üer als     | `10 > 5` ‚Üí True |\r\n| `<`      | kleiner als    | `3 < 2` ‚Üí False |\r\n| `>=`     | gr√∂√üer gleich  | `7 >= 7` ‚Üí True |\r\n| `<=`     | kleiner gleich | `4 <= 5` ‚Üí True |\r\n\r\n\"Diese Operatoren sind wie deine Sinne ‚Äì sie helfen dir, die Welt um dich herum zu verstehen und zu bewerten.\"\r\n\r\n## üß© Logische Operatoren: Kombiniere Bedingungen\r\n\r\n\"Manchmal m√ºssen mehrere Bedingungen gleichzeitig erf√ºllt sein\", f√§hrt Karol fort. Die Leinwand leuchtet heller und zeigt neue Beispiele:\r\n\r\n**AND** (beides muss stimmen):\r\n\r\n```python\r\nalter = 25\r\neinkommen = 2500\r\n\r\nif alter >= 18 and einkommen > 2000:\r\n    print(\"Kredit m√∂glich üí∞\")  # Beide Bedingungen wahr\r\n```\r\n\r\n**OR** (mindestens eins muss stimmen):\r\n\r\n```python\r\nwetter = \"sonnig\"\r\ntemperatur = 28\r\n\r\nif wetter == \"sonnig\" or temperatur > 25:\r\n    # Wird ausgef√ºhrt, weil wetter == \"sonnig\"\r\n    print(\"Eiszeit! üç¶\")\r\n```\r\n\r\n**NOT** (Umkehrung):\r\n\r\n```python\r\nlogin_erfolgreich = False\r\n\r\nif not login_erfolgreich:\r\n    # Wird ausgef√ºhrt, weil login_erfolgreich False ist\r\n    print(\"Bitte neu anmelden! üîí\")\r\n```\r\n\r\n\"Mit diesen drei Operatoren ‚Äì `and`, `or` und `not` ‚Äì kannst du komplexe Entscheidungen programmieren, genau wie das menschliche Gehirn.\"\r\n\r\n## üèÜ Jetzt bist du dran!\r\n\r\n\"Mit diesem Wissen kannst du jetzt richtig m√§chtige Programme schreiben\", sagt Karol aufgeregt. \"Du kannst deinem Code beibringen, intelligente Entscheidungen zu treffen ‚Äì sei es f√ºr die Temperatur eines Zaubertranks oder die Warnsysteme einer Wetterstation. Die Leinw√§nde reagieren bereits positiv, ich sp√ºre es!\"\r\n\r\nDie Muster auf den Leinw√§nden flimmern und bilden kurz ein L√§cheln, bevor sie wieder zu abstrakten Formen werden.\r\n\r\n\"Ich glaube, wir sind auf dem richtigen Weg\", fl√ºstert Karol. \"Die Quantentore zu den Aufgaben √∂ffnen sich. L√∂se sie, und wir kommen dem Ausgang n√§her...\"\r\n\r\nDu betrachtest die schimmernden Quantenknoten, die vor dir erscheinen, und bereitest dich auf die n√§chste Herausforderung vor.\r\n",
    "image": "/story/3.jpg",
    "quests": [
      {
        "filename": "Zaubertrankpr√ºfung.json",
        "x": 570,
        "y": 130,
        "id": 132,
        "content": {
          "version": "v1",
          "title": "Zaubertrankpr√ºfung",
          "description": "Als Zauberlehrling musst du die richtigen Zutaten f√ºr deinen Zaubertrank w√§hlen:\n\n- Frage mit `input()` nach der Temperatur des Kessels in Grad (bereits programmiert)\n- Gib \"Perfekt! F√ºge die Drachenblut-Essenz hinzu.\" aus, wenn die Temperatur √ºber 90 Grad liegt\n- Gib \"Zu kalt! Erh√∂he die Flammen unter dem Kessel.\" aus, wenn die Temperatur 90 Grad oder weniger ist\n\nVorlage:\n\n```py\nif temperatur > ...:\n    ...\nelse:\n    ...\n```",
          "tasks": [
            {
              "title": "Zaubertrankpr√ºfung",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Als Zauberlehrling stehst du vor einem dampfenden Kessel und musst entscheiden, ob er die richtige Temperatur f√ºr die n√§chste Zutat erreicht hat.\", \"Trank brauen beginnen\")\n\n# Initialisiere Tracking-Variablen f√ºr getestete F√§lle\ntested_hot = False\ntested_cold = False\n\nwhile not (tested_hot and tested_cold):\n    __ide_run_client()\n\n    # Pr√ºfe, ob eine Eingabe gemacht wurde\n    inputs = __ide_get_inputs()\n    if len(inputs) == 0:\n        __ide_prompt(\"Du musst nach der Kesseltemperatur fragen. Verwende daf√ºr `input()`.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Pr√ºfe, ob eine Ausgabe vorhanden ist\n    outputs = __ide_get_outputs()\n    if len(outputs) == 0:\n        __ide_prompt(\"Du hast keine Ausgabe gemacht. Nutze `print()` f√ºr die Ausgabe.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Versuche, die eingegebene Temperatur zu ermitteln\n    valid_number = False\n    try:\n        temperatur = float(inputs[-1].replace(',', '.'))\n        valid_number = True\n    except:\n        __ide_prompt(\"Die eingegebene Temperatur konnte nicht als Zahl erkannt werden.\", \"Nochmal versuchen\")\n        continue\n\n    # Ermittle den erwarteten Temperaturzustand\n    if temperatur > 90:\n        expected_state = \"perfekt\"\n        tested_hot = True\n    else:  # temperatur <= 90\n        expected_state = \"kalt\"\n        tested_cold = True\n\n    # √úberpr√ºfe, ob die richtige Ausgabe gemacht wurde\n    last_output = outputs[-1].lower()\n    if expected_state not in last_output:\n        __ide_prompt(f\"Die Ausgabe passt nicht zur Temperatur. Bei {temperatur} Grad sollte deine Ausgabe '{expected_state}' enthalten.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Zeige an, welche F√§lle bereits getestet wurden und welche noch fehlen\n    remaining_cases = []\n    if not tested_hot:\n        remaining_cases.append(\"hei√üer Kessel (√ºber 90 Grad)\")\n    if not tested_cold:\n        remaining_cases.append(\"kalter Kessel (90 Grad oder weniger)\")\n    \n    if remaining_cases:\n        case_list = \", \".join(remaining_cases)\n        __ide_prompt(f\"Zauberhafte Arbeit! Du hast die {expected_state}e Temperatur richtig erkannt. Teste noch: {case_list}\", \"Weiter brauen\")\n\n# Wenn alle Tests bestanden wurden\n__ide_set_progress(True)\n__ide_prompt(\"Ausgezeichnet! üéâ Du hast alle Temperaturzust√§nde richtig erkannt und wei√üt jetzt genau, wann du die Drachenblut-Essenz hinzuf√ºgen kannst. Deine F√§higkeiten als Zauberlehrling verbessern sich!\", \"Weiter\")\n",
          "language": "python-pro",
          "program": "# Zaubertrankpr√ºfung: Bestimme die Kesseltemperatur\n# 1. Frage nach der Kesseltemperatur\n# 2. Bestimme, ob der Kessel hei√ü genug ist\n# 3. Gib die entsprechende Anweisung aus\n\n# TODO: Schreibe deinen Code hier\ntemperatur = float(input(\"Wie hei√ü ist der Kessel in Grad?\"))"
        },
        "deps": [
          10004
        ]
      },
      {
        "filename": "Weltraum_Navigation.json",
        "x": 630,
        "y": -60,
        "id": 131,
        "content": {
          "version": "v1",
          "title": "Weltraum-Navigation",
          "description": "Nach dem erfolgreichen Start deines Raumschiffs ist die Navigationseinheit f√ºr den interplanetaren Kurs bereit. Das System muss verschiedene Gravitationsfelder analysieren:\n\n- Frage mit `input()` nach einem Gravitationswert (bereits programmiert)\n- Gib \"Positives Gravitationsfeld - Antrieb verst√§rken!\" aus, wenn der Wert gr√∂√üer als 0 ist\n- Gib \"Negatives Gravitationsfeld - Bremssysteme aktivieren!\" aus, wenn der Wert kleiner als 0 ist\n- Gib \"Neutrale Zone - Schwebemodus aktivieren!\" aus, wenn der Wert gleich 0 ist\n\nVorlage:\n\n```py\nif graviation < 0:\n    print(\"Negatives Gravitationsfeld - Bremssysteme aktivieren!\")\nelif ...:\n    ...\nelse:\n    ...\n```",
          "tasks": [
            {
              "title": "Gravitationsfeld analysieren",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Nach dem erfolgreichen Start deines Raumschiffs und der System√ºberpr√ºfung navigierst du nun durch verschiedene Gravitationsfelder. Du musst alle drei Arten von Gravitationsfeldern (positiv, negativ und neutral) analysieren, um die Mission abzuschlie√üen.\", \"Mission starten\")\n\n# Initialisiere Tracking-Variablen f√ºr getestete F√§lle\ntested_positive = False\ntested_negative = False\ntested_zero = False\n\nwhile not (tested_positive and tested_negative and tested_zero):\n    __ide_run_client()\n\n    # Pr√ºfe, ob eine Eingabe gemacht wurde\n    inputs = __ide_get_inputs()\n    if len(inputs) == 0:\n        __ide_prompt(\"Du musst nach einem Gravitationswert fragen. Verwende daf√ºr `input()`.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Pr√ºfe, ob eine Ausgabe vorhanden ist\n    outputs = __ide_get_outputs()\n    if len(outputs) == 0:\n        __ide_prompt(\"Du hast keine Ausgabe gemacht. Nutze `print()` f√ºr die Ausgabe.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Versuche, den eingegebenen Gravitationswert zu ermitteln\n    valid_number = False\n    try:\n        gravitation = float(inputs[-1].replace(',', '.'))\n        valid_number = True\n    except:\n        __ide_prompt(\"Der eingegebene Gravitationswert konnte nicht als Zahl erkannt werden.\", \"Nochmal versuchen\")\n        continue\n\n    # Ermittle den erwarteten Gravitationstyp\n    if gravitation > 0:\n        expected_type = \"positiv\"\n        tested_positive = True\n    elif gravitation < 0:\n        expected_type = \"negativ\"\n        tested_negative = True\n    else:  # gravitation == 0\n        expected_type = \"neutral\"\n        tested_zero = True\n\n    # √úberpr√ºfe, ob der richtige Gravitationstyp ausgegeben wurde\n    last_output = outputs[-1].lower()\n    if expected_type not in last_output:\n        __ide_prompt(f\"Die Ausgabe passt nicht zum Gravitationsfeld. Bei dem Wert {gravitation} sollte die Ausgabe '{expected_type}' enthalten.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Zeige an, welche F√§lle bereits getestet wurden und welche noch fehlen\n    remaining_cases = []\n    if not tested_positive:\n        remaining_cases.append(\"positives Gravitationsfeld\")\n    if not tested_negative:\n        remaining_cases.append(\"negatives Gravitationsfeld\")\n    if not tested_zero:\n        remaining_cases.append(\"neutrale Zone\")\n    \n    if remaining_cases:\n        case_list = \", \".join(remaining_cases)\n        __ide_prompt(f\"Navigationsanalyse erfolgreich! Du hast {expected_type}e Gravitationsfelder korrekt erkannt. Teste noch folgende Arten von Feldern: {case_list}\", \"Weiter navigieren\")\n\n# Wenn alle Tests bestanden wurden\n__ide_set_progress(True)\n__ide_prompt(\"Mission erfolgreich abgeschlossen! üéâ Die Navigation deines Raumschiffs kann nun alle Gravitationsfelder korrekt identifizieren und die entsprechenden Systeme aktivieren. Dein Raumschiff ist bereit f√ºr die interplanetare Reise!\", \"Weiter\")",
          "language": "python-pro",
          "program": "# Weltraum-Navigation: Gravitationsfeld-Analyse\n# 1. Frage nach einem Gravitationswert\n# 2. Bestimme, ob das Feld positiv, negativ oder neutral ist\n# 3. Gib die entsprechende Systemanweisung aus\n\n# TODO: Schreibe deinen Code hier\ngravitation = float(input(\"Aktueller Graviationswert:\"))"
        },
        "deps": [
          10004
        ]
      },
      {
        "filename": "Wetterstation_Alarm_1.json",
        "x": 330,
        "y": 120,
        "id": 133,
        "content": {
          "version": "v1",
          "title": "Wetterstation-Alarm 1",
          "description": "Du betreust eine automatische Wetterstation in den Bergen. Bei extremen Wetterbedingungen muss ein Alarmsignal ausgel√∂st werden, um die Bev√∂lkerung zu warnen.\n\n**Deine Aufgaben:**\n- Die Funktion `messeSturmgeschwindigkeit()` liefert die aktuelle Windgeschwindigkeit in km/h\n- Wenn die Windgeschwindigkeit 75 km/h oder mehr betr√§gt, muss eine Sturmwarnung ausgegeben werden\n- Gib \"STURMWARNUNG! Fenster und T√ºren sichern!\" aus, wenn die Bedingung eintritt\n\nTipp: Verwende eine bedingte Anweisung mit `if` und `print()`",
          "tasks": [
            {
              "title": "Sturmwarnung",
              "start": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen zur Wetterstation-√úberwachung! Du bist verantwortlich f√ºr das automatische Sturmwarnsystem.\", \"√úberwachung starten\")\n\n# Tracking-Variablen f√ºr getestete F√§lle\ntested_storm = False\ntested_normal = False\nwindspeed = 50\ndef messeSturmgeschwindigkeit():\n            return windspeed\n\nwhile not (tested_storm and tested_normal):\n    # Generiere verschiedene Windgeschwindigkeiten zum Testen\n    if not tested_normal:\n        # Teste normalen Fall\n        windspeed = 50\n    else:\n        # Teste Sturm-Fall\n        windspeed = 80\n        \n    __ide_run_client(globals=[\"messeSturmgeschwindigkeit\"])\n    \n    # Pr√ºfe die Ausgaben\n    outputs = __ide_get_outputs()\n    \n    if not tested_normal:\n        # √úberpr√ºfe normale Ausgabe\n        if len(outputs) > 0:\n            __ide_prompt(f\"Bei normalen Wetterbedingungen ({windspeed} km/h) sollte keine Warnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_normal = True\n            __ide_prompt(f\"Sehr gut! Die Windgeschwindigkeit betr√§gt {windspeed} km/h und du hast korrekt keine Warnung ausgegeben.\", \"Weiter\")\n    elif not tested_storm:\n        # √úberpr√ºfe Sturmausgabe\n        if len(outputs) == 0:\n            __ide_prompt(\"Du hast keine Ausgabe gemacht. Bei Sturm (‚â• 75 km/h) musst du eine Warnung ausgeben.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"STURMWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei starkem Wind ({windspeed} km/h) muss die Warnung \\\"STURMWARNUNG! Fenster und T√ºren sichern!\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_storm = True\n            __ide_prompt(f\"Gut gemacht! Die Windgeschwindigkeit betr√§gt {windspeed} km/h und du hast die Warnung ausgegeben.\", \"Weiter\")\n            continue\n\n__ide_set_progress(True)\n__ide_prompt(\"Herzlichen Gl√ºckwunsch! Dein Wetterstation-Alarmsystem funktioniert einwandfrei.\")",
          "language": "python-pro",
          "program": "wind = messeSturmgeschwindigkeit()\n\n# TODO\n"
        },
        "deps": [
          10004
        ]
      },
      {
        "filename": "Wetterstation_Alarm_2.json",
        "x": 180,
        "y": 30,
        "deps": [
          133
        ],
        "id": 134,
        "content": {
          "version": "v1",
          "title": "Wetterstation-Alarm 2",
          "description": "Du betreust weiterhin die automatische Wetterstation in den Bergen. Nun musst du die Alarmfunktion erweitern, um mehrere Wetterfaktoren zu ber√ºcksichtigen.\n\n**Deine Aufgaben:**\n- Die Funktion `messeSturmgeschwindigkeit()` liefert die aktuelle Windgeschwindigkeit in km/h\n- Die Funktion `messeNiederschlag()` liefert die Niederschlagsmenge in mm/h\n- Ein Unwetter liegt vor, wenn **ENTWEDER**:\n  - Die Windgeschwindigkeit 75 km/h oder mehr betr√§gt **ODER**\n  - Die Niederschlagsmenge 30 mm/h oder mehr betr√§gt\n- Gib \"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\" aus, wenn eine der Bedingungen zutrifft\n\nTipp: Verwende eine bedingte Anweisung mit `if` und den logischen Operator `or` f√ºr ODER-Verkn√ºpfungen.",
          "tasks": [
            {
              "title": "Unwetterwarnung",
              "start": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen zur erweiterten Wetterstation-√úberwachung! Du √ºberwachst nun sowohl Wind als auch Niederschlag.\", \"√úberwachung starten\")\n\n# Tracking-Variablen f√ºr getestete F√§lle\ntested_normal = False\ntested_storm_only = False\ntested_rain_only = False\n\nwind = 50\nrain = 20\n\ndef messeSturmgeschwindigkeit():\n    return wind\n\ndef messeNiederschlag():\n    return rain\n\nwhile not (tested_normal and tested_storm_only and tested_rain_only):\n    # Generiere verschiedene Wetterbedingungen zum Testen\n    if not tested_normal:\n        # Teste normalen Fall - alles ok\n        wind = 50\n        rain = 20\n    elif not tested_storm_only:\n        # Teste nur Wind - Sturm\n        wind = 80\n        rain = 20\n    elif not tested_rain_only:\n        # Teste nur Regen - Starkregen\n        wind = 50\n        rain = 35\n        \n    __ide_run_client(globals=[\"messeSturmgeschwindigkeit\", \"messeNiederschlag\"])\n    \n    # Pr√ºfe die Ausgaben\n    outputs = __ide_get_outputs()\n    \n    if not tested_normal:\n        # √úberpr√ºfe normale Ausgabe\n        if len(outputs) > 0:\n            __ide_prompt(f\"Bei normalen Wetterbedingungen (Wind: {wind} km/h, Regen: {rain} mm/h) sollte keine Warnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_normal = True\n            __ide_prompt(f\"Sehr gut! Bei normalen Bedingungen (Wind: {wind} km/h, Regen: {rain} mm/h) hast du korrekt keine Warnung ausgegeben.\", \"Weiter\")\n    elif not tested_storm_only:\n        # √úberpr√ºfe Sturmausgabe\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss eine Unwetterwarnung ausgegeben werden, auch wenn der Niederschlag normal ist.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_storm_only = True\n            __ide_prompt(f\"Gut gemacht! Du hast bei Sturm ({wind} km/h) korrekt eine Unwetterwarnung ausgegeben.\", \"Weiter\")\n    elif not tested_rain_only:\n        # √úberpr√ºfe Starkregenausgabe\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss eine Unwetterwarnung ausgegeben werden, auch wenn der Wind normal ist.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_rain_only = True\n            __ide_prompt(f\"Sehr gut! Du hast bei Starkregen ({rain} mm/h) korrekt eine Unwetterwarnung ausgegeben.\", \"Weiter\")\n\n__ide_set_progress(True)\n__ide_prompt(\"Herzlichen Gl√ºckwunsch! Dein erweitertes Wetterstation-Alarmsystem mit ODER-Verkn√ºpfung funktioniert einwandfrei.\")",
          "program": "wind = messeSturmgeschwindigkeit()\nregen = messeNiederschlag()\n\n# TODO\n"
        }
      },
      {
        "filename": "Wetterstation_Alarm_3.json",
        "x": 130,
        "y": 200,
        "deps": [
          134
        ],
        "id": 135,
        "content": {
          "version": "v1",
          "title": "Wetterstation-Alarm 3",
          "description": "Die Wetterstation ben√∂tigt ein erweitertes Warnsystem f√ºr besondere Wetterbedingungen.\n\n**Deine Aufgaben:**\n- Die Funktion `messeSturmgeschwindigkeit()` liefert die aktuelle Windgeschwindigkeit in km/h\n- Die Funktion `messeNiederschlag()` liefert die Niederschlagsmenge in mm/h\n- Die Funktion `messeTemperatur()` liefert die aktuelle Temperatur in ¬∞C\n\n**Folgende Bedingungen m√ºssen gepr√ºft werden:**\n1. FROSTWARNUNG: Wenn die Temperatur unter dem Gefrierpunkt (< 0 ¬∞C) liegt **UND** Niederschlag vorhanden ist (> 0 mm/h)\n2. UNWETTERWARNUNG: Wenn Wind ‚â• 75 km/h **ODER** Niederschlag ‚â• 30 mm/h\n\nGib je nach Bedingung die entsprechende Warnung aus:\n- \"FROSTWARNUNG! Gl√§ttegefahr auf Stra√üen und Wegen!\"\n- \"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\"\n\nTipp: Verwende den logischen Operator `and` f√ºr UND-Verkn√ºpfungen und `or` f√ºr ODER-Verkn√ºpfungen.",
          "tasks": [
            {
              "title": "Erweitertes Alarmsystem",
              "start": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen zur erweiterten Wetterstation-√úberwachung! Du √ºberwachst nun auch Temperaturbedingungen.\", \"√úberwachung starten\")\n\n# Tracking-Variablen f√ºr getestete F√§lle\ntested_normal = False\ntested_frost = False\ntested_storm = False\ntested_rain = False\n\nwind = 50\nrain = 5\ntemp = 15\n\ndef messeSturmgeschwindigkeit():\n    return wind\n\ndef messeNiederschlag():\n    return rain\n\ndef messeTemperatur():\n    return temp\n\nwhile not (tested_normal and tested_frost and tested_storm and tested_rain):\n    # Generiere verschiedene Wetterbedingungen zum Testen\n    if not tested_normal:\n        # Teste normalen Fall - alles ok\n        wind = 50\n        rain = 5\n        temp = 15\n    elif not tested_frost:\n        # Teste Frost mit Niederschlag\n        wind = 30\n        rain = 10\n        temp = -5\n    elif not tested_storm:\n        # Teste nur Sturm\n        wind = 80\n        rain = 5\n        temp = 15\n    elif not tested_rain:\n        # Teste nur Starkregen\n        wind = 50\n        rain = 35\n        temp = 15\n        \n    __ide_run_client(globals=[\"messeSturmgeschwindigkeit\", \"messeNiederschlag\", \"messeTemperatur\"])\n    \n    # Pr√ºfe die Ausgaben\n    outputs = __ide_get_outputs()\n    \n    if not tested_normal:\n        # √úberpr√ºfe normale Ausgabe\n        if len(outputs) > 0:\n            __ide_prompt(f\"Bei normalen Wetterbedingungen (Wind: {wind} km/h, Regen: {rain} mm/h, Temp: {temp}¬∞C) sollte keine Warnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_normal = True\n            __ide_prompt(f\"Sehr gut! Bei normalen Bedingungen hast du korrekt keine Warnung ausgegeben.\", \"Weiter\")\n    elif not tested_frost:\n        # √úberpr√ºfe Frostwarnung\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Frost mit Niederschlag (Temp: {temp}¬∞C, Regen: {rain} mm/h) muss eine Frostwarnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"FROSTWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Frost mit Niederschlag (Temp: {temp}¬∞C, Regen: {rain} mm/h) muss \\\"FROSTWARNUNG! Gl√§ttegefahr auf Stra√üen und Wegen!\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_frost = True\n            __ide_prompt(f\"Sehr gut! Du hast die Frostwarnung korrekt ausgegeben.\", \"Weiter\")\n    elif not tested_storm:\n        # √úberpr√ºfe Sturmausgabe (Unwetter)\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss eine Unwetterwarnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_storm = True\n            __ide_prompt(f\"Gut gemacht! Du hast die Unwetterwarnung bei Sturm korrekt ausgegeben.\", \"Weiter\")\n    elif not tested_rain:\n        # √úberpr√ºfe Starkregenausgabe (Unwetter)\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss eine Unwetterwarnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_rain = True\n            __ide_prompt(f\"Sehr gut! Du hast die Unwetterwarnung bei Starkregen korrekt ausgegeben.\", \"Weiter\")\n\n__ide_set_progress(True)\n__ide_prompt(\"Herzlichen Gl√ºckwunsch! Dein erweitertes Wetterstation-Alarmsystem funktioniert einwandfrei.\")",
          "program": "wind = messeSturmgeschwindigkeit()\nregen = messeNiederschlag()\ntemperatur = messeTemperatur()\n\n# TODO\n"
        }
      }
    ],
    "x": 430,
    "y": 2240
  },
  {
    "id": 10005,
    "dirName": "040-mathematik",
    "title": "4. Mathe-Genie üöß",
    "originalTitle": "Mathe-Genie üöß",
    "description": "# üßÆ Kapitel 4: Mathe-Genie ‚Äì Rechnen wie ein Profi!\r\n\r\nWillkommen in der Welt der Python-Mathematik! Hier lernst du, wie du Zahlen gekonnt jonglierst und coole Berechnungen anstellst. Let's go! üöÄ\r\n\r\n## 1. Arithmetische Grundoperationen\r\n\r\nPython versteht alle Grundrechenarten ‚Äì probier's aus:\r\n\r\n```python\r\nprint(5 + 3)   # Addition: 8\r\nprint(10 - 4)  # Subtraktion: 6\r\nprint(2 * 6)   # Multiplikation: 12\r\nprint(8 / 2)   # Division: 4.0 (Achtung, Ergebnis ist float!)\r\n```\r\n\r\n## 2. Punkt-vor-Strich & Klammern\r\n\r\nPython rechnet wie in der Schule ‚Äì erst Punkt- dann Strichrechnung:\r\n\r\n```python\r\nprint(3 + 4 * 2)   # 11 (nicht 14!)\r\nprint((3 + 4) * 2) # 14 ‚Äì Klammern √§ndern alles!\r\n```\r\n\r\n## 3. Turbo-Zuweisungen üöÄ\r\n\r\nKurze Schreibweise f√ºr Variablen-Updates:\r\n\r\n```python\r\npunkte = 10\r\npunkte += 5  # √Ñquivalent zu: punkte = punkte + 5\r\nprint(punkte) # 15\r\n\r\n# Funktioniert auch mit -=, *=, /=\r\n```\r\n\r\n## 4. Power mit \\*\\*\r\n\r\nPotenzieren leicht gemacht:\r\n\r\n```python\r\nprint(2 ** 3)  # 8 (2¬≥)\r\nprint(5 ** 0.5) # Wurzel aus 5 ‚âà 2.236\r\n```\r\n\r\n## 5. Mathe-Modul f√ºr Profis\r\n\r\nF√ºr komplexere Rechnungen brauchen wir `math`:\r\n\r\n```python\r\nimport math\r\n\r\n# Wurzel ziehen\r\nprint(math.sqrt(25))  # 5.0\r\n\r\n# Mit Pi rechnen\r\nradius = 3\r\numfang = 2 * math.pi * radius\r\nprint(f\"Umfang: {umfang:.2f} cm\")  # Formatierung auf 2 Nachkommastellen\r\n```\r\n\r\n## 6. Variablen im Einsatz\r\n\r\nVariablen machen Berechnungen dynamisch:\r\n\r\n```python\r\nl√§nge = 8\r\nbreite = 5\r\nfl√§che = l√§nge * breite\r\nprint(f\"Die Fl√§che betr√§gt {fl√§che} m¬≤\")  # 40 m¬≤\r\n```\r\n\r\n## üèÜ √úbungszeit!\r\n\r\n1. Berechne das Volumen eines W√ºrfels mit Kantenl√§nge 7 cm\r\n2. Wandele 100¬∞ Fahrenheit in Celsius um: (¬∞F ‚àí 32) √ó 5/9\r\n3. Berechne die Hypotenuse eines rechtwinkligen Dreiecks mit Katheten 3 und 4 cm\r\n\r\n```python\r\n# L√∂sung 3:\r\nimport math\r\na = 3\r\nb = 4\r\nc = math.sqrt(a**2 + b**2)\r\nprint(c)  # 5.0 ‚Äì der ber√ºhmte Pythagoras!\r\n```\r\n\r\nMathe macht mit Python richtig Spa√ü, oder? üòé Probiere verschiedene Kombinationen aus und werde zum Rechenk√ºnstler!\r\n",
    "image": "",
    "quests": [
      {
        "filename": "intro2.json",
        "x": 1000,
        "y": -100,
        "id": 110,
        "content": {
          "version": "v1",
          "title": "Magische Trankbrauerei",
          "description": "Braue den perfekten Zaubertrank! Berechne die Zutatenmengen mit Variablen:\n\n1. Nutze den vorgegebenen 'schlamm'-Wert\n2. Berechne 'pilzpulver' als ein Drittel davon\n3. Bestimme 'glitzer' als doppelte Pilzpulver-Menge\n\nDas System pr√ºft automatisch deine Rechnungen ‚óï‚Äø‚óï",
          "tasks": [
            {
              "title": "Zaubertrank-Mischung",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      2,
                      1,
                      0
                    ],
                    [
                      1,
                      3,
                      1
                    ],
                    [
                      0,
                      1,
                      2
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      2,
                      1,
                      0
                    ],
                    [
                      1,
                      3,
                      1
                    ],
                    [
                      0,
                      1,
                      2
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Der magische Kessel ist bereit!\", \"Brauen beginnen\")\n\nschlamm = random.randint(90, 210)\nerwartet_pilz = round(schlamm / 3, 2)\nerwartet_glitzer = round(erwartet_pilz * 2, 2)\n\n__ide_run_client(globals=['schlamm'])\n\nfor var in ['pilzpulver', 'glitzer']:\n    if var not in globals():\n        __ide_prompt(f\"Variable '{var}' fehlt! Bitte berechne alle Zutaten.\", \"Beenden\")\n        __ide_exit()\n\nif not abs(pilzpulver - erwartet_pilz) < 0.01:\n    __ide_prompt(f\"Pilzpulver: {schlamm} / 3 = {erwartet_pilz}, nicht {pilzpulver}\", \"Nochmal versuchen\")\n    __ide_exit()\n\nif not abs(glitzer - erwartet_glitzer) < 0.01:\n    __ide_prompt(f\"Glitzer: {erwartet_pilz} * 2 = {erwartet_glitzer}, nicht {glitzer}\", \"√úberpr√ºfen\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(f\"‚öóÔ∏è Der Trank brodelt perfekt! ({schlamm}ml Schlamm verarbeitet)\", \"Magisch!\")",
          "language": "python-pro",
          "program": "# Der magische Schlamm-Wert ist vorgegeben\npilzpulver = 0  # Ersetze 0 durch schlamm / 3\nglitzer = 0     # Ersetze 0 durch pilzpulver * 2"
        },
        "deps": [
          10005
        ]
      }
    ],
    "x": 920,
    "y": 2400
  },
  {
    "id": 10006,
    "dirName": "050-schleifen",
    "title": "5. Wiederholungen üöß",
    "originalTitle": "Wiederholungen üöß",
    "description": "# üéØ Kapitel 5: Die Kunst der Wiederholung mit for & while\r\n\r\nHeute lernst du, wie man Code wiederholt ‚Äì wie ein DJ, der den perfekten Beat loopt! üéß\r\n\r\n## üß© Listen ‚Äì Deine Daten-Sammelbox\r\n\r\nStell dir eine Einkaufsliste vor, aber f√ºr Computer:\r\n\r\n```python\r\n# So erstellst du eine Liste\r\nspielkarten = [\"Herz Ass\", \"Karo K√∂nig\", \"Pik Dame\", \"Kreuz Bube\"]\r\nprimzahlen = [2, 3, 5, 7, 11]\r\nmixed_list = [42, \"Antwort\", True] # Alles m√∂gliche drin!\r\n```\r\n\r\n## üîÑ Die for-Schleife ‚Äì Dein Wiederholungs-Profi\r\n\r\n**\"F√ºr jedes Element in der Liste: Mach was damit!\"**\r\n\r\n```python\r\n# Einkaufsliste abarbeiten\r\neinkaufsliste = [\"√Ñpfel\", \"Banane\", \"Milch\"]\r\n\r\nfor produkt in einkaufsliste:\r\n    print(f\"‚úèÔ∏è Brauche noch: {produkt}\")\r\n    print(\"...auf zum n√§chsten Produkt!\\n\")\r\n```\r\n\r\n_Ausgabe:_\r\n\r\n```\r\n‚úèÔ∏è Brauche noch: √Ñpfel\r\n...auf zum n√§chsten Produkt!\r\n\r\n‚úèÔ∏è Brauche noch: Banane\r\n...auf zum n√§chsten Produkt!\r\n\r\n‚úèÔ∏è Brauche noch: Milch\r\n...auf zum n√§chsten Produkt!\r\n```\r\n\r\n**Mit Zahlen arbeiten? Klar mit range():**\r\n\r\n```python\r\n# Countdown mit Style üöÄ\r\nfor sekunde in range(5, 0, -1):\r\n    print(f\"{sekunde... Abflug!\")\r\nprint(\"üî• Liftoff!\")\r\n```\r\n\r\n## ‚è≥ Die while-Schleife ‚Äì Der Hartn√§ckige\r\n\r\n**\"Mach weiter, solange die Bedingung stimmt!\"**\r\n\r\n```python\r\n# Pizza-Back-Simulator üçï\r\ntemperatur = 20\r\nziel_temp = 220\r\n\r\nwhile temperatur < ziel_temp:\r\n    temperatur += 20\r\n    print(f\"¬∞C: {temperatur}¬∞C | Heizt auf...\")\r\n\r\nprint(\"üîî Pizza ist fertig! Buon appetito!\")\r\n```\r\n\r\n_Vorsicht:_ Vergiss nicht die Temperatur zu erh√∂hen, sonst brennt der Ofen durch! üî•\r\n\r\n## ü•ä for vs. while ‚Äì Wer wann?\r\n\r\n- **FOR:** Wenn du wei√üt, wie oft's laufen soll (z.B. Liste durchgehen)\r\n- **WHILE:** Wenn es auf eine Bedingung ankommt (z.B. Spiel l√§uft, bis Game Over)\r\n\r\n## üéØ Challenge:\r\n\r\nErrate die geheime Zahl mit nur 3 Versuchen!\r\n\r\n```python\r\ngeheimzahl = 7\r\nversuche = 3\r\n\r\nwhile versuche > 0:\r\n    raten = int(input(\"üéØ Dein Tipp (1-10): \"))\r\n    if raten == geheimzahl:\r\n        print(\"üéâ Treffer! Gewonnen!\")\r\n        break\r\n    versuche -= 1\r\n    print(f\"‚ùå Daneben! Noch {versuche} Versuche\")\r\nelse:\r\n    print(\"üò¢ Game Over! Keine Versuche mehr\")\r\n```\r\n\r\n## üí° Pro-Tipps:\r\n\r\n- `range()` kann auch so: `range(start, ende, schritt)`\r\n- Benenne Schleifen-Variablen sinnvoll:\r\n  - `for sch√ºler in klasse:` statt `for x in y:`\r\n- Breakpoint setzen? Einfach `break` schreiben!\r\n\r\nJetzt du: Erfinde deine eigenen Schleifen-Experimente! üîÑ Wie w√§r's mit einem Roboter-Tanz per Code? ü§ñüíÉüï∫\r\n",
    "image": "",
    "quests": [],
    "x": 950,
    "y": 2640
  },
  {
    "id": 10007,
    "dirName": "060-zufall",
    "title": "6. Gl√ºcksspiel kann s√ºchtig machen üöß",
    "originalTitle": "Gl√ºcksspiel kann s√ºchtig machen üöß",
    "description": "# üé≤ Kapitel 6: Gl√ºcksspiel kann s√ºchtig machen\r\n\r\nWillkommen in der Welt des Zufalls! Hier lernst du, wie du deine Programme unvorhersehbar und spannend gestalten kannst ‚Äì perfekt f√ºr Spiele, Simulationen und √úberraschungseffekte. üéÆ‚ú®\r\n\r\n## üéØ Zufallszahlen mit `random.randint()`\r\n\r\nZuerst m√ºssen wir das `random`-Modul importieren:\r\n\r\n```python\r\nimport random\r\n```\r\n\r\n**W√ºrfel-Simulator**:  \r\nErzeuge eine zuf√§llige Ganzzahl zwischen 1 und 6:\r\n\r\n```python\r\nw√ºrfel = random.randint(1, 6)\r\nprint(f\"Du hast eine {w√ºrfel} gew√ºrfelt! üé≤\")\r\n```\r\n\r\n**Ratespiel**:  \r\nDer Computer denkt sich eine Zahl aus, die du erraten musst:\r\n\r\n```python\r\ngeheimzahl = random.randint(1, 100)\r\nversuch = int(input(\"Rate eine Zahl zwischen 1-100: \"))\r\n\r\nif versuch == geheimzahl:\r\n    print(\"Treffer! üéØ\")\r\nelse:\r\n    print(f\"Leider daneben. Die Zahl war {geheimzahl}. üòÖ\")\r\n```\r\n\r\n## üéÅ Zuf√§llige Auswahl mit `random.choice()`\r\n\r\n**M√ºnzwurf**:  \r\nKopf oder Zahl? Entscheide dich!\r\n\r\n```python\r\nm√∂glichkeiten = [\"Kopf\", \"Zahl\"]\r\nergebnis = random.choice(m√∂glichkeiten)\r\nprint(f\"Die M√ºnze zeigt: {ergebnis}! üí∞\")\r\n```\r\n\r\n**Gl√ºckskeks-Simulator**:  \r\nLass dich von weisen Spr√ºchen √ºberraschen:\r\n\r\n```python\r\nspr√ºche = [\r\n    \"Heute ist dein Gl√ºckstag! üåü\",\r\n    \"Vorsicht vor fallenden Kokosn√ºssen. ü••\",\r\n    \"Code, den du heute schreibst, wird dich morgen retten. üíª\"\r\n]\r\nprint(random.choice(spr√ºche))\r\n```\r\n\r\n## üöÄ Tipps & Tricks\r\n\r\n- `randint(a, b)` inkludiert **beide** Grenzen (1 **und** 6 beim W√ºrfel).\r\n- Mit `random.choice()` kannst du auch Listen von Zahlen, Farben oder Spielkarten mischen.\r\n- Probiere ein **Mini-Lotteriespiel**: Ziehe 6 Zahlen zwischen 1-49:\r\n  ```python\r\n  lottozahlen = random.sample(range(1,50), 6)\r\n  print(f\"Gewinnzahlen: {lottozahlen} üçÄ\")\r\n  ```\r\n\r\n## üí° Challenge: Stein-Schere-Papier\r\n\r\nProgrammiere ein Spiel gegen den Computer! Der Benutzer gibt seine Wahl ein (z.B. \"Stein\"), der Computer w√§hlt zuf√§llig aus [\"Stein\", \"Schere\", \"Papier\"] und entscheidet, wer gewinnt. ü™®‚úÇÔ∏èüìÑ\r\n\r\n**Beispiel-L√∂sung**:\r\n\r\n```python\r\noptionen = [\"Stein\", \"Schere\", \"Papier\"]\r\ncomputer_wahl = random.choice(optionen)\r\nspieler_wahl = input(\"Stein, Schere oder Papier? \")\r\n\r\nprint(f\"Computer w√§hlt: {computer_wahl}\")\r\n# Vergleichslogik hier einf√ºgen (if/elif/else)\r\n```\r\n\r\nViel Spa√ü beim Experimentieren ‚Äì aber pass auf, dass du nicht s√ºchtig nach deinen eigenen Spielen wirst! üòâüî•\r\n",
    "image": "",
    "quests": [],
    "x": 700,
    "y": 2700
  },
  {
    "id": 10008,
    "dirName": "070-funktionen",
    "title": "7. Weniger Chaos, mehr Funktionen üöß",
    "originalTitle": "Weniger Chaos, mehr Funktionen üöß",
    "description": "# üéâ Kapitel 7: Weniger Chaos, mehr Funktionen üéâ\r\n\r\nWillkommen in der Welt der Funktionen! Hier lernst du, wie du deinen Code organisierst und Wiederholungen vermeidest. Funktionen sind wie kleine Helfer, die Aufgaben f√ºr dich √ºbernehmen ‚Äì praktisch, oder? üòä\r\n\r\n## 1. Funktionen erstellen mit `def`\r\n\r\nSo baust du deine eigene Funktion:\r\n\r\n```python\r\ndef begruessung():\r\n    print(\"Hallo Coding-Champion!\")\r\n    print(\"Heute wird ein super Tag zum Lernen! üåü\")\r\n```\r\n\r\n**Aufrufen nicht vergessen:**\r\n\r\n```python\r\nbegruessung()  # Die Funktion wird ausgef√ºhrt\r\n```\r\n\r\n## 2. Parameter ‚Äì Deine pers√∂nlichen Boten\r\n\r\nFunktionen k√∂nnen Eingaben entgegennehmen:\r\n\r\n```python\r\ndef pers√∂nliche_begr√º√üung(name):\r\n    print(f\"Hallo {name}!\")\r\n    print(\"Wie geht's?\")\r\n```\r\n\r\n**So verwendest du sie:**\r\n\r\n```python\r\npers√∂nliche_begr√º√üung(\"Anna\")   # Hallo Anna!\r\npers√∂nliche_begr√º√üung(\"Max\")    # Hallo Max!\r\n```\r\n\r\n## 3. Docstrings ‚Äì Deine Funktions-Bedienungsanleitung\r\n\r\n```python\r\ndef quadrat(zahl):\r\n    \"\"\"\r\n    Berechnet das Quadrat einer Zahl\r\n    Parameter: zahl (int/float)\r\n    R√ºckgabewert: Quadrat der Zahl\r\n    \"\"\"\r\n    return zahl ** 2\r\n```\r\n\r\n**Tipp:** Mit `help(quadrat)` siehst du die Erkl√§rung!\r\n\r\n## 4. Return ‚Äì Der magische Bringdienst\r\n\r\n```python\r\ndef rechteck_fl√§che(l√§nge, breite):\r\n    return l√§nge * breite\r\n\r\nergebnis = rechteck_fl√§che(5, 3)\r\nprint(ergebnis)  # 15\r\n```\r\n\r\n**Wichtig:** `return` beendet die Funktion sofort!\r\n\r\n## 5. Lokale vs. Globale Variablen\r\n\r\n```python\r\nglobale_variable = 10\r\n\r\ndef test_funktion():\r\n    lokale_variable = 5\r\n    print(\"In der Funktion:\", globale_variable + lokale_variable)  # 15\r\n\r\ntest_funktion()\r\nprint(\"Drau√üen:\", globale_variable)  # 10\r\n# print(lokale_variable) w√ºrde einen Fehler geben!\r\n```\r\n\r\n## üèÜ Zusammenfassung\r\n\r\n- `def name():` erstellt Funktionen\r\n- Parameter machen Funktionen flexibel\r\n- `return` gibt Werte zur√ºck\r\n- Docstrings erkl√§ren deinen Code\r\n- Lokale Variablen leben nur in der Funktion\r\n\r\n## üöÄ Challenge-Time!\r\n\r\n**Aufgabe:** Erstelle eine Funktion `w√ºrfel_volumen`, die die Kantenl√§nge als Parameter nimmt und das Volumen zur√ºckgibt. Vergiss den Docstring nicht!\r\n\r\n```python\r\n# Hier kommt deine L√∂sung hin!\r\n\r\ndef w√ºrfel_volumen(kante):\r\n    \"\"\"\r\n    Berechnet das Volumen eines W√ºrfels\r\n    Parameter: kante (Zahl)\r\n    R√ºckgabewert: Volumen (Zahl)\r\n    \"\"\"\r\n    return kante ** 3\r\n\r\n# Teste deine Funktion\r\nprint(w√ºrfel_volumen(3))  # Sollte 27 ausgeben\r\n```\r\n\r\nProbiere es aus und lass deine Funktionen tanzen! üíÉüï∫ Bei Fragen: Einfach ausprobieren ‚Äì Fehler sind die besten Lehrer! üòâ\r\n",
    "image": "",
    "quests": [],
    "x": 950,
    "y": 2900
  },
  {
    "id": 10009,
    "dirName": "999-fundgrube",
    "title": "8. BONUS",
    "originalTitle": "BONUS",
    "description": "Hier findest du weitere Bonus-Aufgaben.\r\n",
    "image": "",
    "quests": [
      {
        "filename": "63.json",
        "x": 300,
        "y": 200,
        "id": 103,
        "content": {
          "version": "v1",
          "title": "W√ºrfel",
          "description": "Mit dem Modul `random` kannst du in Python Zufallszahlen erzeugen.\n\nBeispiel: Wenn du eine Zahl zwischen 1 und 100 erzeugen willst (beide Grenzen eingeschlossen), dann schreibe\n\n`zahl = random.randint(1, 100)`\n\nNutze dieses Wissen, um einen W√ºrfel zu programmieren und √ºberarbeite das Script auf der linken Seite.",
          "tasks": [
            {
              "title": "Neuer Auftrag",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      4,
                      4
                    ],
                    [
                      4,
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      4,
                      4
                    ],
                    [
                      4,
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Ist dein W√ºrfel bereit? Auf Los wird der Test gestartet.\", \"Los\")\n__ide_karol = Robot()\n\nresults = []\n\nfor i in range(100):\n    augenzahl = None\n    __ide_run_client()\n    if not augenzahl in [1, 2, 3, 4, 5, 6]:\n        __ide_prompt(f\"Augenzahl '{augenzahl}' ung√ºltig, erwarte eine Zahl zwischen 1 und 6. Bitte √ºberarbeite dein Programm.\", \"Beenden\")\n    print(\"W√ºrfel zeigt: \" + str(augenzahl))\n    __ide_sleep(0.03)\n    results.append(augenzahl)\n\n__ide_prompt(\"W√ºrfel wurde 100 Mal geworfen.\")\n\nfor i in range(1, 7):\n    if not i in results:\n        __ide_prompt(f\"Dein W√ºrfel hat in 100 W√ºrfen keine einzige {i} gew√ºrfelt. Bitte √ºberpr√ºfe dein Programm.\", \"Beenden\")\n        __ide_karol.beenden()\n\n__ide_set_progress(True)\n__ide_prompt(\"Sehr gut! Dein W√ºrfel funktioniert!\")",
          "language": "python-pro",
          "program": "# Simuliere einen W√ºrfel. W√§hle eine zuf√§llige Zahl zwischen 1 und 6\n# und speichere sie in der Variable augenzahl.\nimport random\n\naugenzahl = 4\n"
        },
        "deps": [
          10009
        ]
      },
      {
        "filename": "62.json",
        "x": 100,
        "y": 200,
        "id": 102,
        "content": {
          "version": "v1",
          "title": "Schere, Stein, Papier",
          "description": "Karol m√∂chte mit dir eine Runde Schere, Stein, Papier spielen. Leider kann Karol nur √ºber den Code mit dir sprechen. Aber das macht nichts, du kennst dich ja mit Programmieren aus!\n\nSchaue dir das Script auf der linken Seite an und schreibe es fertig.\n\nNutze bedingte Anweisungen (`if`), um optimal zu reagieren und verwende den Vergleichsoperator `==` (zwei Gleichheitszeichen). Setze die Variable `meineWahl` so, dass du alle Runden gewinnst.\n\nKlicke `Start` um das Spiel zu starten. Viel Erfolg!",
          "tasks": [
            {
              "title": "Spielen",
              "start": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\nrounds = [\"schere\", \"stein\", \"papier\"]\nrandom.shuffle(rounds)\nkarolWahl = \"\"\nmeineWahl = \"\"\n\n__ide_karol = Robot()\n__ide_prompt(\"Bist du bereit?\", \"Ja!\")\n\n\ndef runRound(n):\n    global karolWahl\n    global meineWahl\n    karolWahl = rounds[n-1]\n    meineWahl = \"\"\n    __ide_prompt(f\"Runde {n}: Schere, Stein, Papier! Karol w√§hlt '{karolWahl}'.\")\n    __ide_run_client(globals=['karolWahl'])\n    if not meineWahl in [\"schere\", \"stein\", \"papier\"]:\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Das ist kein g√ºltiges Zeichen. Bitte erweitere dein Programm üöß\", 'Beenden')\n        __ide_karol.beenden()\n    # check\n    if karolWahl == meineWahl:\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}', das ist Unentschieden. Gewinne alle Runden, um die Aufgabe zu l√∂sen.\", \"Beenden\")\n        __ide_karol.beenden()\n    if (karolWahl == 'schere' and meineWahl == 'papier' or \n        karolWahl == 'stein' and meineWahl == 'schere' or\n        karolWahl == 'papier' and meineWahl == 'stein'):\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Du verlierst :( Gewinne alle Runden, um die Aufgabe zu l√∂sen.\", \"Beenden\")\n        __ide_karol.beenden()\n    __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Du gewinnst die Runde, bravo!\", \"weiter\")\n\nrunRound(1)\nrunRound(2)\nrunRound(3)\n\n__ide_prompt(\"Gl√ºckwunsch! Du hast alle drei Runden gewonnen!\")\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Karol w√§hlt zuerst ein Zeichen und speichert es in der Variable karolWahl\n# print(karolWahl) -> \"schere\", \"stein\" oder \"papier\"\n\n# Reagiere jetzt darauf:\n\nmeineWahl = \"nichts\"\n\nif karolWahl == \"schere\":\n    meineWahl = \"papier\"\n\n"
        },
        "deps": [
          10009
        ]
      },
      {
        "filename": "65.json",
        "x": 500,
        "y": 200,
        "id": 104,
        "content": {
          "version": "v1",
          "title": "Rechenwettbewerb",
          "description": "Zumindest das sollte der Computer gut k√∂nnen: rechnen!\n\nHinweise:\n\n- `+` und `-` sind einleuchtend\n- nutze f√ºr die Multiplikation das `*`-Sternchen (Shift-Plus) \n- und f√ºr die Division den `/`-Schr√§gstrich (Alt-Gr-7)",
          "tasks": [
            {
              "title": "Die 4 Grundrechenarten",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Rechenwettbewerb startet in 3, 2, 1 ...\", \"Los!\")\n\nfor i in range(10):\n    b = random.randint(4, 14)\n    a = b * random.randint(0, 15)\n    print(f\"Runde {i + 1}: a = {a}, b = {b}\")\n    def ladeA():\n        return a\n    def ladeB():\n        return b\n    __ide_run_client(globals=['ladeA', 'ladeB'])\n    names = ['summe', 'differenz', 'produkt', 'quotient']\n    for name in names:\n        if not name in globals():\n            __ide_prompt(f\"`{name}` nicht gefunden. \" +\n                         \"Da scheint eine Variable verloren gegangen zu sein.\",\n                        \"Beenden\")\n            __ide_exit()\n    \n    if not summe == a + b:\n        __ide_prompt(f\"Oh no! {a} + {b} = {a + b}, aber deine Summe ist {summe}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not differenz == a - b:\n        __ide_prompt(f\"Oh no! {a} - {b} = {a - b}, aber deine Differenz ist {differenz}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not produkt == a * b:\n        __ide_prompt(f\"Oh no! {a} * {b} = {a * b}, aber dein Produkt ist {produkt}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not quotient == a / b:\n        __ide_prompt(f\"Oh no! {a} / {b} = {a / b}, aber dein Quotient ist {quotient}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n        \n    print(\"‚úÖ\")\n    __ide_sleep(1)\n\n__ide_set_progress(True)\n__ide_prompt(\"Du hast den Wettbewerb gewonnen üèÜ!\")",
          "language": "python-pro",
          "program": "# F√ºhre mit a und b die vier Grundrechenarten aus und \n# speichere das Ergebnis in den Variablen\n\na = ladeA()\nb = ladeB()\n\n# Beispiel: a plus b\nsumme = a + b\n\n# TODO: rechne a minus b\ndifferenz = 42\n\n# TODO: rechne a mal b\nprodukt = 42\n\n# TODO: rechne a geteilt durch b\nquotient = 42\n"
        },
        "deps": [
          10009
        ]
      },
      {
        "filename": "66.json",
        "x": 700,
        "y": 200,
        "id": 105,
        "content": {
          "version": "v1",
          "title": "Small Talk",
          "description": "Mit Python gibt es neue M√∂glichkeiten der Kommunikation!\n\nHinweise:\n\n‚Ä¢ `input(\"Frage\")` erlaubt es, eine Frage zu stellen und die Antwort zu speichern.\n\n‚Ä¢ Mit `+` kannst du Texte und Variablen zu einem l√§ngeren Text verbinden.",
          "tasks": [
            {
              "title": "Hi!",
              "start": {
                "dimX": 7,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\ninputs = __ide_get_inputs()\nif len(inputs) < 2:\n    __ide_prompt(\"Du hast nicht nach dem Hobby gefragt. Los, sei nicht sch√ºchtern! \"+\n                 \"Nutze `input()`.\",\n                 \"Beenden\")\n    __ide_exit()\n\nhobby = inputs[1]\n\noutputs = __ide_get_outputs()\nif len(outputs) < 4:\n    __ide_prompt(\"Es fehlt deine Antwort zum Hobby.\",\n                 \"Beenden\")\n    __ide_exit()\n\nlast = outputs[-1]\n\nif not hobby in last:\n    __ide_prompt(\"Das Hobby soll als Text in deiner Antwort vorkommen!\",\n                 \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(\"Small Talk erfolgreich ausgef√ºhrt ‚óï ‚ó° ‚óï\")",
          "language": "python-pro",
          "program": "# F√ºhre ein kleines Gespr√§che und frage nach Name und Hobby.\n\n# Beispiel\nname = input(\"Wie hei√üt du?\")\nprint(\"Hallo, \" + name + \"!\")\n\n# eine kurze Pause\nimport time; time.sleep(1.5)\n\n# TODO: Frage nach dem Hobby der Person\nhobby = \"\"\n\n# TODO: Sage was Nettes und wiederhole dabei das Hobby\n"
        },
        "deps": [
          10009
        ]
      },
      {
        "filename": "67.json",
        "x": 900,
        "y": 200,
        "id": 106,
        "content": {
          "version": "v1",
          "title": "MacDonald's Farm",
          "description": "Programmiere verschiedene Tiere und ihre Laute.\n\nHinweise:\n\n- Erstelle f√ºr jedes Tier eine eigene Funktion mit `def <name>():`\n- R√ºcke die zweite Zeile mit der Tab-Taste ein.\n- Das `return` zeigt das Ergebnis der Funktion an, schreibe hier den Laut hin.",
          "tasks": [
            {
              "title": "Katze",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 2,
                  "data": [
                    [
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 2,
                  "data": [
                    [
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\n\nanimals = [x for x in globals().keys() if \n           not x.startswith(\"__\") and not x == 'Robot']\n\n__ide_prompt(\"Willkommen auf MacDonald's Farm!\", \"Los\")\n\nfor animal in animals:\n    f = globals()[animal]\n    if not callable(f):\n        __ide_prompt(f\"Erwarte f√ºr '{animal}' eine Funktion. Bitte nutze `def`.\", \"Beenden\")\n        __ide_exit()\n    sound = f().title()\n    __ide_prompt(f\"Die {animal.title()} machen: {sound}, {sound}, {sound}\")\n\nif len(animals) < 4:\n    __ide_prompt(\"MacDonald f√ºhlt sich noch einsam. F√ºge weitere Tiere hinzu!\", \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Das sind die Tiere auf der Farm von MacDonald.\n\ndef katzen():\n    return \"miau\"\n\n# TODO: f√ºge 3 weitere Tiere hinzu\n"
        },
        "deps": [
          10009
        ]
      },
      {
        "filename": "68.json",
        "x": 500,
        "y": 340,
        "id": 107,
        "content": {
          "version": "v1",
          "title": "Codes",
          "description": "Warum es hier wohl geht? Finde es heraus!",
          "tasks": [
            {
              "title": "Hm",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "def ladeCode(n):\n    __ide_sleep(0.2)\n    print(f\"Lade Code {n}.\")\n    __ide_sleep(0.5)\n    if n == 123:\n        __ide_prompt(\"Ein guter Anfang. Finde den n√§chsten Hinweis unter dem Code 765.\", \"Beenden\")\n        return\n\n    \n    if n == 765:\n        __ide_prompt(\"Dein n√§chster Code ist das Ergebnis von `12 * 12`.\", \"Beenden\")\n        return\n    \n    if n == 144:\n        __ide_prompt(\"Dein finaler Code ist das Ergebnis von `3 ** 5` (3 hoch 5).\", \"Beenden\")\n        return\n    \n    if n == 243:\n        __ide_set_progress(True)\n        __ide_exit()\n\n    __ide_prompt(f\"Beim Code '{n}' ist nichts zu finden.\", \"Beenden\")\n    __ide_exit()\n\n__ide_run_client(globals=['ladeCode'])",
          "language": "python-pro",
          "program": "# Starte mit dem Code 123\n\nladeCode(0)"
        },
        "deps": [
          10009
        ]
      },
      {
        "filename": "69.json",
        "x": 650,
        "y": 340,
        "id": 108,
        "content": {
          "version": "v1",
          "title": "Ausz√§hlung",
          "description": "R√§ume alle Ziegel und Marken auf und z√§hle: Jeder Ziegel z√§hlt `plus 1`, jede Marke `minus 1`.\n\nLege am Ende einen Ziegelstapel in der passenden H√∂he.",
          "tasks": [
            {
              "title": "Welt 1",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      2,
                      0,
                      2
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 5,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 8,
                  "y": 1,
                  "dir": "north"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      1
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            },
            {
              "title": "Welt 2",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 1,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      1,
                      2,
                      3,
                      3,
                      2,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 8,
                  "y": 1,
                  "dir": "north"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      5
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            },
            {
              "title": "Welt 3",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 1,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      3,
                      0,
                      1,
                      1,
                      2,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 6,
                  "y": 1,
                  "dir": "east"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "",
          "language": "python-pro",
          "program": "karol = Robot()\n\n"
        },
        "deps": [
          10009
        ]
      }
    ],
    "x": 680,
    "y": 2930
  }
]

// Generate chaptersMap based on chapter information
export const chaptersMap: {
  [key: number]: OverviewMapData
} = {}

export const chapterOverviewData: {
  title: string
  titleEn: string
  quests: number[]
}[] = []

// Generate chapterQuests based on chapter information
export const chapterQuests: { [key: number]: QuestData } = {}

// Generate chapterData based on chapter information
export const chapterData: { [key: number]: { title: string, description: string, image: string } } = {}

// Populate the exported objects
chapterInfo.forEach((chapter) => {
  // Add chapter to chapterData
  chapterData[chapter.id] = {
    title: chapter.title,
    description: chapter.description,
    image: chapter.image,
  }

  // Default chapter position and dependencies
  chaptersMap[chapter.id] = {
    x: chapter.x,
    y: chapter.y,
    deps: [chapter.id == 10001 ? 61 : chapter.id - 1],
  }
  
  const title = `${chapter.title}`

  const c = {
    title,
    titleEn: title,
    quests: [] as number[],
  }

  // Add quests from this chapter to chapterQuests
  chapter.quests.forEach((quest) => {
    const questId = quest.id
    chapterQuests[questId] = deserializeQuestToData(quest.content as any)
    chaptersMap[questId] = {
      x: quest.x,
      y: quest.y + chapter.y,
      deps: quest.deps,
      chapter: chapter.id,
    }
    c.quests.push(questId)
  })
  chapterOverviewData.push(c)
})
