// Auto-generated by pack.js - DO NOT EDIT MANUALLY
import { Heading, QuestData } from '../state/types'
import { deserializeQuestToData } from '../commands/json'

// Define chapter information from meta.json files
const chapterInfo = [
  {
    "id": 10001,
    "dirName": "010-variablen",
    "title": "1. Variablen",
    "originalTitle": "Variablen",
    "quests": [
      {
        "filename": "intro1.json",
        "x": 300,
        "y": 200,
        "id": 100,
        "content": {
          "version": "v1",
          "title": "Raumschiffvorbereitung",
          "description": "Ein Raumschiff braucht dringend Systemchecks! Initialisiere die Variablen für die Startfreigabe.\n\n- `treibstoff`: Ganzzahl mit 10000 Litern\n\n- `sauerstoff`: Ganzzahl mit 500 Einheiten\n\n- `antriebsleistung`: Fließkommazahl 3.5\n\n- `system_aktiv`: Wahrheitswert True\n\nNutze die richtigen Datentypen und vermeide Ein-/Ausgabe-Befehle.",
          "tasks": [
            {
              "title": "Systeminitialisierung",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\n\nchecks = [\n    ('treibstoff', int, 10000),\n    ('sauerstoff', int, 500),\n    ('antriebsleistung', float, 3.5),\n    ('system_aktiv', bool, True)\n]\n\nfor var, typ, wert in checks:\n    if var not in globals():\n        __ide_prompt(f'Variable `{var}` fehlt!', 'Beenden')\n        __ide_exit()\n    \n    if not isinstance(globals()[var], typ):\n        __ide_prompt(f'Falscher Typ für {var}: Erwartet {typ.__name__}', 'Beenden')\n        __ide_exit()\n    \n    if globals()[var] != wert:\n        __ide_prompt(f'{var} ist {globals()[var]} statt {wert}', 'Beenden')\n        __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Alle Systeme grün! Startfreigabe erteilt 🚀', 'Mission starten')",
          "language": "python-pro",
          "program": "# Setze die Systemvariablen korrekt\n\ntreibstoff = 9000\nsauerstoff = '500'\nantriebsleistung = 3\nsystem_aktiv = False\n"
        }
      },
      {
        "filename": "intro2.json",
        "x": 500,
        "y": 200,
        "id": 101,
        "content": {
          "version": "v1",
          "title": "Magische Trankbrauerei",
          "description": "Braue den perfekten Zaubertrank! Berechne die Zutatenmengen mit Variablen:\n\n1. Nutze den vorgegebenen 'schlamm'-Wert\n2. Berechne 'pilzpulver' als ein Drittel davon\n3. Bestimme 'glitzer' als doppelte Pilzpulver-Menge\n\nDas System prüft automatisch deine Rechnungen ◕‿◕",
          "tasks": [
            {
              "title": "Zaubertrank-Mischung",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      2,
                      1,
                      0
                    ],
                    [
                      1,
                      3,
                      1
                    ],
                    [
                      0,
                      1,
                      2
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      2,
                      1,
                      0
                    ],
                    [
                      1,
                      3,
                      1
                    ],
                    [
                      0,
                      1,
                      2
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Der magische Kessel ist bereit!\", \"Brauen beginnen\")\n\nschlamm = random.randint(90, 210)\nerwartet_pilz = round(schlamm / 3, 2)\nerwartet_glitzer = round(erwartet_pilz * 2, 2)\n\n__ide_run_client(globals=['schlamm'])\n\nfor var in ['pilzpulver', 'glitzer']:\n    if var not in globals():\n        __ide_prompt(f`Variable '{var}' fehlt! Bitte berechne alle Zutaten.`, \"Beenden\")\n        __ide_exit()\n\nif not abs(pilzpulver - erwartet_pilz) < 0.01:\n    __ide_prompt(f\"Pilzpulver: {schlamm} / 3 = {erwartet_pilz}, nicht {pilzpulver}\", \"Nochmal versuchen\")\n    __ide_exit()\n\nif not abs(glitzer - erwartet_glitzer) < 0.01:\n    __ide_prompt(f\"Glitzer: {erwartet_pilz} * 2 = {erwartet_glitzer}, nicht {glitzer}\", \"Überprüfen\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(f\"⚗️ Der Trank brodelt perfekt! ({schlamm}ml Schlamm verarbeitet)\", \"Magisch!\")",
          "language": "python-pro",
          "program": "# Der magische Schlamm-Wert ist vorgegeben\npilzpulver = 0  # Ersetze 0 durch schlamm / 3\nglitzer = 0     # Ersetze 0 durch pilzpulver * 2"
        }
      }
    ]
  },
  {
    "id": 10002,
    "dirName": "999-fundgrube",
    "title": "2. Fundgrupe",
    "originalTitle": "Fundgrupe",
    "quests": [
      {
        "filename": "63.json",
        "x": 500,
        "y": 200,
        "id": 103,
        "content": {
          "version": "v1",
          "title": "Würfel",
          "description": "Mit dem Modul `random` kannst du in Python Zufallszahlen erzeugen.\n\nBeispiel: Wenn du eine Zahl zwischen 1 und 100 erzeugen willst (beide Grenzen eingeschlossen), dann schreibe\n\n`zahl = random.randint(1, 100)`\n\nNutze dieses Wissen, um einen Würfel zu programmieren und überarbeite das Script auf der linken Seite.",
          "tasks": [
            {
              "title": "Neuer Auftrag",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      4,
                      4
                    ],
                    [
                      4,
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      4,
                      4
                    ],
                    [
                      4,
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Ist dein Würfel bereit? Auf Los wird der Test gestartet.\", \"Los\")\n__ide_karol = Robot()\n\nresults = []\n\nfor i in range(100):\n    augenzahl = None\n    __ide_run_client()\n    if not augenzahl in [1, 2, 3, 4, 5, 6]:\n        __ide_prompt(f\"Augenzahl '{augenzahl}' ungültig, erwarte eine Zahl zwischen 1 und 6. Bitte überarbeite dein Programm.\", \"Beenden\")\n    print(\"Würfel zeigt: \" + str(augenzahl))\n    __ide_sleep(0.03)\n    results.append(augenzahl)\n\n__ide_prompt(\"Würfel wurde 100 Mal geworfen.\")\n\nfor i in range(1, 7):\n    if not i in results:\n        __ide_prompt(f\"Dein Würfel hat in 100 Würfen keine einzige {i} gewürfelt. Bitte überprüfe dein Programm.\", \"Beenden\")\n        __ide_karol.beenden()\n\n__ide_set_progress(True)\n__ide_prompt(\"Sehr gut! Dein Würfel funktioniert!\")",
          "language": "python-pro",
          "program": "# Simuliere einen Würfel. Wähle eine zufällige Zahl zwischen 1 und 6\n# und speichere sie in der Variable augenzahl.\nimport random\n\naugenzahl = 4\n"
        }
      },
      {
        "filename": "62.json",
        "x": 300,
        "y": 200,
        "id": 102,
        "content": {
          "version": "v1",
          "title": "Schere, Stein, Papier",
          "description": "Karol möchte mit dir eine Runde Schere, Stein, Papier spielen. Leider kann Karol nur über den Code mit dir sprechen. Aber das macht nichts, du kennst dich ja mit Programmieren aus!\n\nSchaue dir das Script auf der linken Seite an und schreibe es fertig.\n\nNutze bedingte Anweisungen (`if`), um optimal zu reagieren und verwende den Vergleichsoperator `==` (zwei Gleichheitszeichen). Setze die Variable `meineWahl` so, dass du alle Runden gewinnst.\n\nKlicke `Start` um das Spiel zu starten. Viel Erfolg!",
          "tasks": [
            {
              "title": "Spielen",
              "start": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\nrounds = [\"schere\", \"stein\", \"papier\"]\nrandom.shuffle(rounds)\nkarolWahl = \"\"\nmeineWahl = \"\"\n\n__ide_karol = Robot()\n__ide_prompt(\"Bist du bereit?\", \"Ja!\")\n\n\ndef runRound(n):\n    global karolWahl\n    global meineWahl\n    karolWahl = rounds[n-1]\n    meineWahl = \"\"\n    __ide_prompt(f\"Runde {n}: Schere, Stein, Papier! Karol wählt '{karolWahl}'.\")\n    __ide_run_client(globals=['karolWahl'])\n    if not meineWahl in [\"schere\", \"stein\", \"papier\"]:\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Das ist kein gültiges Zeichen. Bitte erweitere dein Programm 🚧\", 'Beenden')\n        __ide_karol.beenden()\n    # check\n    if karolWahl == meineWahl:\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}', das ist Unentschieden. Gewinne alle Runden, um die Aufgabe zu lösen.\", \"Beenden\")\n        __ide_karol.beenden()\n    if (karolWahl == 'schere' and meineWahl == 'papier' or \n        karolWahl == 'stein' and meineWahl == 'schere' or\n        karolWahl == 'papier' and meineWahl == 'stein'):\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Du verlierst :( Gewinne alle Runden, um die Aufgabe zu lösen.\", \"Beenden\")\n        __ide_karol.beenden()\n    __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Du gewinnst die Runde, bravo!\", \"weiter\")\n\nrunRound(1)\nrunRound(2)\nrunRound(3)\n\n__ide_prompt(\"Glückwunsch! Du hast alle drei Runden gewonnen!\")\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Karol wählt zuerst ein Zeichen und speichert es in der Variable karolWahl\n# print(karolWahl) -> \"schere\", \"stein\" oder \"papier\"\n\n# Reagiere jetzt darauf:\n\nmeineWahl = \"nichts\"\n\nif karolWahl == \"schere\":\n    meineWahl = \"papier\"\n\n"
        }
      },
      {
        "filename": "65.json",
        "x": 700,
        "y": 200,
        "id": 104,
        "content": {
          "version": "v1",
          "title": "Rechenwettbewerb",
          "description": "Zumindest das sollte der Computer gut können: rechnen!\n\nHinweise:\n\n- `+` und `-` sind einleuchtend\n\n- nutze für die Multiplikation das `*`-Sternchen (Shift-Plus) \n\n- und für die Division den `/`-Schrägstrich (Alt-Gr-7)",
          "tasks": [
            {
              "title": "Die 4 Grundrechenarten",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Rechenwettbewerb startet in 3, 2, 1 ...\", \"Los!\")\n\nfor i in range(10):\n    b = random.randint(4, 14)\n    a = b * random.randint(0, 15)\n    print(f\"Runde {i + 1}: a = {a}, b = {b}\")\n    def ladeA():\n        return a\n    def ladeB():\n        return b\n    __ide_run_client(globals=['ladeA', 'ladeB'])\n    names = ['summe', 'differenz', 'produkt', 'quotient']\n    for name in names:\n        if not name in globals():\n            __ide_prompt(f\"`{name}` nicht gefunden. \" +\n                         \"Da scheint eine Variable verloren gegangen zu sein.\",\n                        \"Beenden\")\n            __ide_exit()\n    \n    if not summe == a + b:\n        __ide_prompt(f\"Oh no! {a} + {b} = {a + b}, aber deine Summe ist {summe}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not differenz == a - b:\n        __ide_prompt(f\"Oh no! {a} - {b} = {a - b}, aber deine Differenz ist {differenz}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not produkt == a * b:\n        __ide_prompt(f\"Oh no! {a} * {b} = {a * b}, aber dein Produkt ist {produkt}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not quotient == a / b:\n        __ide_prompt(f\"Oh no! {a} / {b} = {a / b}, aber dein Quotient ist {quotient}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n        \n    print(\"✅\")\n    __ide_sleep(1)\n\n__ide_set_progress(True)\n__ide_prompt(\"Du hast den Wettbewerb gewonnen 🏆!\")",
          "language": "python-pro",
          "program": "# Führe mit a und b die vier Grundrechenarten aus und \n# speichere das Ergebnis in den Variablen\n\na = ladeA()\nb = ladeB()\n\n# Beispiel: a plus b\nsumme = a + b\n\n# TODO: rechne a minus b\ndifferenz = 42\n\n# TODO: rechne a mal b\nprodukt = 42\n\n# TODO: rechne a geteilt durch b\nquotient = 42\n"
        }
      },
      {
        "filename": "66.json",
        "x": 900,
        "y": 200,
        "id": 105,
        "content": {
          "version": "v1",
          "title": "Small Talk",
          "description": "Mit Python gibt es neue Möglichkeiten der Kommunikation!\n\nHinweise:\n\n• `input(\"Frage\")` erlaubt es, eine Frage zu stellen und die Antwort zu speichern.\n\n• Mit `+` kannst du Texte und Variablen zu einem längeren Text verbinden.",
          "tasks": [
            {
              "title": "Hi!",
              "start": {
                "dimX": 7,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\ninputs = __ide_get_inputs()\nif len(inputs) < 2:\n    __ide_prompt(\"Du hast nicht nach dem Hobby gefragt. Los, sei nicht schüchtern! \"+\n                 \"Nutze `input()`.\",\n                 \"Beenden\")\n    __ide_exit()\n\nhobby = inputs[1]\n\noutputs = __ide_get_outputs()\nif len(outputs) < 4:\n    __ide_prompt(\"Es fehlt deine Antwort zum Hobby.\",\n                 \"Beenden\")\n    __ide_exit()\n\nlast = outputs[-1]\n\nif not hobby in last:\n    __ide_prompt(\"Das Hobby soll als Text in deiner Antwort vorkommen!\",\n                 \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(\"Small Talk erfolgreich ausgeführt ◕ ◡ ◕\")",
          "language": "python-pro",
          "program": "# Führe ein kleines Gespräche und frage nach Name und Hobby.\n\n# Beispiel\nname = input(\"Wie heißt du?\")\nprint(\"Hallo, \" + name + \"!\")\n\n# eine kurze Pause\nimport time; time.sleep(1.5)\n\n# TODO: Frage nach dem Hobby der Person\nhobby = \"\"\n\n# TODO: Sage was Nettes und wiederhole dabei das Hobby\n"
        }
      },
      {
        "filename": "67.json",
        "x": 1100,
        "y": 200,
        "id": 106,
        "content": {
          "version": "v1",
          "title": "MacDonald's Farm",
          "description": "Programmiere verschiedene Tiere und ihre Laute.\n\nHinweise:\n\n- Erstelle für jedes Tier eine eigene Funktion mit `def <name>():`\n\n- Rücke die zweite Zeile mit der Tab-Taste ein.\n\n- Das `return` zeigt das Ergebnis der Funktion an, schreibe hier den Laut hin.\n",
          "tasks": [
            {
              "title": "Katze",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 2,
                  "data": [
                    [
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 2,
                  "data": [
                    [
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\n\nanimals = [x for x in globals().keys() if \n           not x.startswith(\"__\") and not x == 'Robot']\n\n__ide_prompt(\"Willkommen auf MacDonald's Farm!\", \"Los\")\n\nfor animal in animals:\n    f = globals()[animal]\n    if not callable(f):\n        __ide_prompt(f\"Erwarte für '{animal}' eine Funktion. Bitte nutze `def`.\", \"Beenden\")\n        __ide_exit()\n    sound = f().title()\n    __ide_prompt(f\"Die {animal.title()} machen: {sound}, {sound}, {sound}\")\n\nif len(animals) < 4:\n    __ide_prompt(\"MacDonald fühlt sich noch einsam. Füge weitere Tiere hinzu!\", \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Das sind die Tiere auf der Farm von MacDonald.\n\ndef katzen():\n    return \"miau\"\n\n# TODO: füge 3 weitere Tiere hinzu\n"
        }
      },
      {
        "filename": "68.json",
        "x": 300,
        "y": 400,
        "id": 107,
        "content": {
          "version": "v1",
          "title": "Codes",
          "description": "Warum es hier wohl geht? Finde es heraus!",
          "tasks": [
            {
              "title": "Hm",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "def ladeCode(n):\n    __ide_sleep(0.2)\n    print(f\"Lade Code {n}.\")\n    __ide_sleep(0.5)\n    if n == 123:\n        __ide_prompt(\"Ein guter Anfang. Finde den nächsten Hinweis unter dem Code 765.\", \"Beenden\")\n        return\n\n    \n    if n == 765:\n        __ide_prompt(\"Dein nächster Code ist das Ergebnis von `12 * 12`.\", \"Beenden\")\n        return\n    \n    if n == 144:\n        __ide_prompt(\"Dein finaler Code ist das Ergebnis von `3 ** 5` (3 hoch 5).\", \"Beenden\")\n        return\n    \n    if n == 243:\n        __ide_set_progress(True)\n        __ide_exit()\n\n    __ide_prompt(f\"Beim Code '{n}' ist nichts zu finden.\", \"Beenden\")\n    __ide_exit()\n\n__ide_run_client(globals=['ladeCode'])",
          "language": "python-pro",
          "program": "# Starte mit dem Code 123\n\nladeCode(0)"
        }
      },
      {
        "filename": "69.json",
        "x": 500,
        "y": 400,
        "id": 108,
        "content": {
          "version": "v1",
          "title": "Auszählung",
          "description": "Räume alle Ziegel und Marken auf und zähle: Jeder Ziegel zählt `plus 1`, jede Marke `minus 1`.\n\nLege am Ende einen Ziegelstapel in der passenden Höhe.",
          "tasks": [
            {
              "title": "Welt 1",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      2,
                      0,
                      2
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 5,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 8,
                  "y": 1,
                  "dir": "north"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      1
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            },
            {
              "title": "Welt 2",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 1,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      1,
                      2,
                      3,
                      3,
                      2,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 8,
                  "y": 1,
                  "dir": "north"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      5
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            },
            {
              "title": "Welt 3",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 1,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      3,
                      0,
                      1,
                      1,
                      2,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 6,
                  "y": 1,
                  "dir": "east"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "",
          "language": "python-pro",
          "program": "karol = Robot()\n\n"
        }
      }
    ]
  }
]

// Generate chaptersMap based on chapter information
export const chaptersMap: {
  [key: number]: { x: number; y: number; deps: number[]; dir?: Heading }
} = {}

export const chapterOverviewData: {
  title: string
  titleEn: string
  quests: number[]
}[] = []

// Generate chapterQuests based on chapter information
export const chapterQuests: { [key: number]: QuestData } = {}

// Generate chapterData based on chapter information
export const chapterData: { [key: number]: { title: string } } = {}

// Populate the exported objects
chapterInfo.forEach((chapter) => {
  // Add chapter to chapterData
  chapterData[chapter.id] = {
    title: chapter.title,
  }

  // Default chapter position and dependencies
  chaptersMap[chapter.id] = {
    x: 600,
    y: 1750,
    deps: [61],
  }
  
  const title = `${chapter.title} (Python-Kurs)`

  const c = {
    title,
    titleEn: title,
    quests: [] as number[],
  }

  // Add quests from this chapter to chapterQuests
  chapter.quests.forEach((quest) => {
    const questId = quest.id
    chapterQuests[questId] = deserializeQuestToData(quest.content as any)
    chaptersMap[questId] = {
      x: quest.x,
      y: quest.y + 1800,
      deps: [chapter.id],
    }
    c.quests.push(questId)
  })
  chapterOverviewData.push(c)
})
