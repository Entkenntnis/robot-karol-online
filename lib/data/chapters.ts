// Auto-generated by pack.js - DO NOT EDIT MANUALLY
import { QuestData, OverviewMapData } from '../state/types'
import { deserializeQuestToData } from '../commands/json'

// Define chapter information from meta.json files
const chapterInfo = [
  {
    "id": 10001,
    "dirName": "000-intro",
    "title": "0. Alles ist schei√üe",
    "originalTitle": "Alles ist schei√üe",
    "description": "# Alles ist schei√üe\r\n\r\n_Es klopft an der T√ºr zu Ellies Garage._\r\n\r\n**Ellie**: Ja?  \r\n**Joel**: Kann ich reinkommen?  \r\n**Ellie**: Ausnahmsweise.\r\n\r\n_Joel mustert Ellie, wie sie mit gerunzelter Stirn √ºber ein aufgeschlagenes Buch gebeugt sitzt, neben ihr ein alter Laptop._\r\n\r\n**Joel**: Hey Kiddo, das Abendessen ist fertig. Was machst du da so verbissen?\r\n\r\n_Ellie st√∂√üt ein frustriertes Ger√§usch aus und schiebt das Buch von sich._\r\n\r\n**Ellie**: Ich versuche, nicht dumm zu sein.  \r\n**Joel** (tritt n√§her, seine Augen √ºberfliegen den Titel): \"Python f√ºr Einsteiger\" ... seit wann interessierst du dich daf√ºr?  \r\n**Ellie** (verschr√§nkt die Arme): Ich dachte, es w√§re vielleicht ... n√ºtzlich. Stell dir vor, wir k√∂nnten Programme schreiben, um die Patrouillen zu planen. Oder das verdammte Inventar zu verwalten, damit wir wissen, wie viele Konservern noch da sind. Aber ich scheitere schon an der allerersten √úbung. Es ist alles schei√üe!\r\n**Joel**: Hey, hey. Rom wurde auch nicht an einem Tag erbaut. Und dein letzter Kochversuch hat auch nicht auf Anhieb ...  \r\n**Ellie**: Stopp!! Dar√ºber reden wir nicht!  \r\n**Joel**: Okay, okay. Dir scheint das wichtig zu sein. Wie w√§re es damit: Nach dem Abendessen setze ich mich einfach zu dir. Du versuchst es nochmal in Ruhe, und ich sorge daf√ºr, dass du das bl√∂de Buch nicht aus dem Fenster wirfst. Manchmal braucht man nur ein zweites Paar Augen daneben. Deal?  \r\n**Ellie** (mit forschen Blick): Du bist immer noch nicht mein Dad ... aber du hilfst mir, versprochen?  \r\n**Joel**: Hab ich dich je in Stich gelassen?\r\n\r\n_Ellie schaut ihn einen Moment lang an. Ein kaum merkliches L√§cheln umspielt ihre Lippen. Sie steht auf und streckt sich._\r\n\r\n**Ellie**: Dann zeig mal, ob sich deine Kochk√ºnste verbessert haben. Ich habe pl√∂tzlich richtig Hunger.\r\n",
    "image": "/story/ellie0.jpg",
    "quests": [
      {
        "filename": "Begr√º√üung.json",
        "x": 870,
        "y": 170,
        "id": 147,
        "content": {
          "version": "v1",
          "title": "Begr√º√üung",
          "description": "*Nach dem Abendessen in Ellies Garage*\n\n**Joel**: Los geht's.  \n**Ellie**: Die erste √úbung ist eigentlich nicht kompliziert. Mit `print()` kann mein Programm sprechen und ich m√∂chte zwei Sachen sagen, das siehst du an den zwei hellblauen Sprechblasen unten. Wenn ich Texte schreiben will, m√ºssen sie mit Anf√ºhrungszeichen beginnen und enden. Links ist mein Programm, aber es enth√§lt einen Fehler, den ich nicht finde.  \n**Joel**: Was schaust du mich so an? Du bist die Expertin, na los! Finde den Fehler und bringe das Programm zum Laufen.",
          "tasks": [],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "",
          "chats": [
            {
              "title": "Chat 1",
              "messages": [
                {
                  "role": "out",
                  "text": "Hallo, Jackson!"
                },
                {
                  "role": "out",
                  "text": "Ich lerne jetzt Programmieren!"
                }
              ]
            }
          ],
          "language": "python-pro",
          "program": "print(\"Hallo, Jackson!\")\nprint(\"Ich lerne jetzt Programmieren!)"
        },
        "deps": [
          10001
        ]
      }
    ],
    "x": 930,
    "y": 1520
  },
  {
    "id": 10002,
    "dirName": "010-variablen",
    "title": "1. Gl√ºckbringer",
    "originalTitle": "Gl√ºckbringer",
    "description": "# üéì Kapitel 1: Variablen\r\n\r\nIm Karols Atelier sind einige Laptops aufgestellt, an der einzig freien Wand projeziert ein Beamer, den man aber im hellen Licht kaum lesen kann. \"Den werden wir erstmal nicht brauchen, solange ihr zu zweit seid\", bemerkt Emi.\r\n\r\nDu traust dich dann doch zu fragen: \"Kommen noch weitere Leute?\" Karol nickt: \"Ein paar weitere G√§ste haben sich angemeldet, sie kommen etwas sp√§ter. Wir sollen ruhig schon mal mit den ersten Themen anfangen. Ich brauche ja eh etwas mehr Zeit als die anderen.\" Karol gibt Emi ein Zeichen, sie r√§uspert sich ganz professionell und der Workshop beginnt.\r\n\r\n\"Ich m√∂chte mit Variablen anfangen. Diese sind sind ein entspannter Einstieg. Stellt es euch so vor: Der Computer muss sich ja viele Dinge merken. Und jede Information speichert dein Programm in einer solchen Variable.\" Emi f√§ngt an zu tippen:\r\n\r\n```py\r\nfarbe = \"blasslila\"\r\npinsel_gr√∂√üe = 13\r\nbild_breite_cm = 27.8\r\nist_inspiriert = True\r\n```\r\n\r\n\"So kannst du, meine Tante, dir die wichtigsten Dinge notieren, falls du sie mal wieder vergisst.\"\r\n\r\n\"Hey, so alt bin ich auch wieder nicht\", beschwert sich Karol. Gut zu wissen, dass Emi nicht nur dir gegen√ºber etwas schnippisch ist.\r\n\r\n\"Sind das alle Arten von Informationen, die man speichern kann?\", fragt Karol zur√ºck. \"Ich w√ºrde erstmal mit diesen anfangen\", erkl√§rte Emi. \"Sp√§ter kannst du aus diesen grundlegenden Datentypen gr√∂√üere Objekte bauen oder eine Liste anlegen. Ah, ich sollte vielleicht noch ein paar Details erg√§nzen.\r\n\r\nDieses Gleichheitszeichen (`=`) ist eine Wertzuweisung:\r\n\r\n```\r\n<Name der Variable> = <Wert>\r\n```\r\n\r\nDabei wird der alte Wert der Variable weggeschmissen und der neue Wert geschrieben. Der Name ist wichtig, denn nur mit diesem kannst du auf die Information zugreifen. Du kannst einer Variable jederzeit einen neuen Wert zuweisen:\r\n\r\n```py\r\nfarbe = \"gr√ºn\"\r\n\r\n# Wert von Variable farbe ist in diesem Bereich \"gr√ºn\"\r\n\r\nfarbe = \"rot\"\r\n\r\n# Wert von Variable farbe ist in diesem Bereich \"rot\"\r\n\r\nfarbe = \"dunkelviolett\"\r\n```\r\n\r\nJede Variable hat au√üerdem einen Typ. Nicht wie die Typen auf der Stra√üe, sondern im Sinne von Kategorie. Ihr habt die vier wichtigsten Typen jetzt gesehen, ich fasse sie f√ºr euch nochmal zusammen.\r\n\r\n## Datentypen im √úberblick\r\n\r\n### 1. Strings - F√ºr Text\r\n\r\nNutze doppelte Anf√ºhrungszeichen.\r\n\r\n```python\r\nname = \"Max\"\r\n```\r\n\r\n### 2. Integer - Ganze Zahlen\r\n\r\n```python\r\nalter = 12\r\nklassenstufe = 7\r\n```\r\n\r\n### 3. Float - Kommazahlen\r\n\r\nVerwende als Dezimaltrenner einen Punkt.\r\n\r\n```python\r\nnote = 2.3\r\npi = 3.14159\r\n```\r\n\r\n### 4. Boolean - Wahrheitswerte\r\n\r\n```python\r\nhat_ge√ºbt = True\r\nist_ferien = False\r\n```\r\n\r\n## üìù Kommentare\r\n\r\n```py\r\n# die Lieblingsfarbe meiner Tante\r\nfarbe = \"?\" # bitte noch ausf√ºllen\r\n```\r\n\r\nDie grauen Text hinter dem `#` (Hashtag) sind _Kommentare_. Sie erkl√§ren den Code und werden vom Computer ignoriert.\r\n\r\n## üö´ Verbotene Namen\r\n\r\nIhr d√ºrft die Variablenamen fast beliebig w√§hlen. Ein paar wenige Sachen sind nicht erlaubt:\r\n\r\n```python\r\n2pac = \"Rapper\"    # Zahl am Anfang geht nicht\r\nmein-name = \"Emi\" # Bindestrich nicht erlaubt\r\nclass = 8         # Schl√ºsselw√∂rter verboten\r\n```\r\n\r\nAchte bei den Variablenamen auf Gro√ü- und Kleinschreibung! Diese machen einen Unterschied und `alter` ist eine andere Variable als `ALTER`.\r\n\r\n## üèãÔ∏è √úbungen\r\n\r\nBis hierher alles klar?\", Emi blickt uns beide an. Du nickst brav, Karol ist voller Tatendrang und bittet Emi, uns ein paar √úbungsaufgaben zu stellen, damit wir die Theorie etwas √ºben k√∂nnen. Sie antwortet nur: \"Ich w√§re doch eine schlechte Dozentin wenn ich keine √úbungsaufgaben vorbereitet h√§tte.\"\r\n",
    "image": "/story/1_v2.jpg",
    "quests": [
      {
        "filename": "Lieblinge.json",
        "x": 540,
        "y": 30,
        "id": 138,
        "content": {
          "version": "v1",
          "title": "Lieblinge",
          "description": "Emi und ich kennen uns ja schon ganz gut, aber magst du vielleicht ein paar Sachen √ºber dich mitteilen?\n\nNutze f√ºr die Variablen einen passenden Datentyp und setze sie auf die Werte, die f√ºr dich passen.",
          "tasks": [
            {
              "title": "Herz",
              "start": {
                "dimX": 7,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      1,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      1,
                      0,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      1,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      1,
                      0,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Bereit, deine Vorlieben zu teilen?\", \"Los geht's\")\n\n__ide_run_client()\n\n# Pr√ºfen, ob alle Variablen definiert sind\nvariablen = [\"lieblingsfarbe\", \"lieblingszahl\", \"mag_winter\", \"mag_fr√ºhling\", \"mag_sommer\", \"mag_herbst\"]\n\nfor var in variablen:\n    if var not in globals() or globals()[var] is None:\n        __ide_prompt(f'Variable `{var}` fehlt oder ist None!', 'Beenden')\n        __ide_exit()\n\n# Typpr√ºfungen\nif not isinstance(lieblingsfarbe, str):\n    __ide_prompt('Die Lieblingsfarbe sollte ein Text sein (str).', 'Korrigieren')\n    __ide_exit()\n\nif not isinstance(lieblingszahl, (int, float)):\n    __ide_prompt('Die Lieblingszahl sollte eine Zahl sein (int oder float).', 'Korrigieren')\n    __ide_exit()\n\n# Pr√ºfen der Jahreszeiten-Vorlieben\njahreszeiten = [mag_winter, mag_fr√ºhling, mag_sommer, mag_herbst]\nfor i, jahreszeit in enumerate(jahreszeiten):\n    if not isinstance(jahreszeit, bool):\n        jahreszeit_name = variablen[i+2]\n        __ide_prompt(f'`{jahreszeit_name}` sollte ein Wahrheitswert sein (bool).', 'Korrigieren')\n        __ide_exit()\n\n# Ausgabe der Lieblingswerte\nprint(f\"Deine Lieblingsfarbe ist: {lieblingsfarbe}\")\nprint(f\"Deine Lieblingszahl ist: {lieblingszahl}\")\nprint(f\"Du magst den Winter: {mag_winter}\")\nprint(f\"Du magst den Fr√ºhling: {mag_fr√ºhling}\")\nprint(f\"Du magst den Sommer: {mag_sommer}\")\nprint(f\"Du magst den Herbst: {mag_herbst}\")\n\n__ide_set_progress(True)\n__ide_prompt('Danke f√ºr deine Eingaben! Das Quantensystem hat deine Vorlieben registriert. üöÄ', 'Weiter')",
          "language": "python-pro",
          "program": "# Setze deine pers√∂nlichen Vorlieben\n\n# Lieblingsfarbe als Text (String)\nlieblingsfarbe = None\n\n# Lieblingszahl als Ganzzahl (int) oder Kommazahl (float)\nlieblingszahl = None\n\n# Jahreszeiten-Vorlieben als Wahrheitswerte (bool: True/False)\nmag_winter = None\nmag_fr√ºhling = None\nmag_sommer = None\nmag_herbst = None"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Korrekturen.json",
        "x": 620,
        "y": 184,
        "id": 143,
        "content": {
          "version": "v1",
          "title": "Korrekturen",
          "description": "Emi hat ein paar √úbungsaufgaben f√ºr dich und Karol vorbereitet. In diesem Code sind einige Variablen falsch definiert. Bitte korrigiere sie.\n\nHinweise:\n- Beim Namen fehlen die Anf√ºhrungszeichen\n- Die Note soll eine Kommazahl sein\n- Setze Pinselgr√∂√üe auf die positive Zahl 34\n- Setze ist_inspiriert auf den Wahrheitswert True",
          "tasks": [
            {
              "title": "Bug",
              "start": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Emi's Workshop: Variablen korrigieren\", \"√úbung starten\")\n\n__ide_run_client()\n\nsystem_checks = [\n    ('farbe', str, \"blasslila\", \"Text in Anf√ºhrungszeichen\"),\n    ('note', float, 2.3, \"Kommazahl\"),\n    ('pinsel_gr√∂√üe', int, 34, \"positive Zahl\"),\n    ('ist_inspiriert', bool, True, \"Wahrheitswert\")\n]\n\nfor var, typ, wert, hinweis in system_checks:\n    if var not in globals():\n        __ide_prompt(f'Fehler: `{var}` nicht gefunden!', 'Korrigieren')\n        __ide_exit()\n    \n    if not isinstance(globals()[var], typ):\n        __ide_prompt(f'Datentypfehler: `{var}` muss {hinweis} sein', 'Korrigieren')\n        __ide_exit()\n    \n    if globals()[var] != wert:\n        __ide_prompt(f'`{var}` zeigt {globals()[var]} statt {wert}!', 'Wert korrigieren')\n        __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Sehr gut! Emi nickt anerkennend: \"Das habt ihr richtig gemacht!\"', 'Weiter')",
          "language": "python-pro",
          "program": "# Korrigiere die Variablen nach Emis Anweisungen\n\nfarbe = blasslila\n\nnote = \"2.3\"\npinsel_gr√∂√üe = -34\n\nist_inspiriert = None"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Drei_W√ºnsche.json",
        "x": 428,
        "y": 144,
        "id": 144,
        "content": {
          "version": "v1",
          "title": "Drei W√ºnsche",
          "description": "Jetzt ist eure Kreativit√§t gefordert. Wenn ihr drei W√ºnsche h√§ttet, wie w√ºrden sie lauten? Achtet auf diese Bedingungen:\n\n- Es m√ºssen genau drei W√ºnsche sein, nicht mehr und nicht weniger.\n- Jeder Wunsch ist eine Wertzuweisung auf eine Variable wie `kontostand_in_euro = 1000000`.\n- Jeder Wunsch nutzt einen anderen Datentyp.",
          "tasks": [
            {
              "title": "Sternschnuppe",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 1,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 1,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Das sind also unsere W√ºnsche!\", \"Simsalabim\")\n\n__ide_run_client()\n\n# Variablen sammeln (ohne Systemvariablen)\nuser_vars = [v for v in globals() if not v.startswith('__ide_') and v != '__builtins__' and v != 'Robot']\n\ntypen = [type(globals()[v]).__name__ for v in user_vars]\n\nerforderliche_typen = {'int', 'float', 'str', 'bool'}\n\nif len(user_vars) != 3:\n    __ide_prompt(f'‚ùå Falsche Anzahl W√ºnsche: {len(user_vars)} statt 3', 'Nochmal versuchen')\n    __ide_exit()\n\nif len(set(typen)) < 3:\n    doppelte = [t for t in ['int','float','str', 'bool'] if typen.count(t) > 1]\n    __ide_prompt(f'‚ùå Doppelte Datentypen: {\", \".join(doppelte)}', 'Typen pr√ºfen')\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Das klingt wunderbar Ÿ©(^‚Äø^)€∂')",
          "language": "python-pro",
          "program": "# Notiere deine drei W√ºnsche:\n\n"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Quiz.json",
        "x": 777,
        "y": 210,
        "id": 141,
        "content": {
          "version": "v1",
          "title": "Quiz",
          "description": "Meine Tante mag Quiz-Fragen, deshalb gibt es hier ein Quiz f√ºr euch.\n\nWeise den drei Variablen den richtigen Wert zu. W√§hle jeweils einen passenden Datentyp. Achte auf Gro√ü-/Kleinschreibung.",
          "tasks": [
            {
              "title": "Quiz",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Bereit f√ºr das Quiz?\", \"Quiz starten\")\n\n__ide_run_client()\n\nquiz_checks = [\n    ('hauptstadt_deutschland', str, \"Berlin\", \"Text in Anf√ºhrungszeichen\"),\n    ('ende_des_zweiten_weltkriegs', int, 1945, \"Ganzzahl\"),\n    ('ein_viertel_als_dezimalzahl', float, 0.25, \"Kommazahl\")\n]\n\nfehler = 0\nresultate = []\n\nfor var, typ, wert, hinweis in quiz_checks:\n    if var not in globals():\n        resultate.append(f'‚ùå Variable `{var}` fehlt!\\n\\n')\n        fehler += 1\n        continue\n    \n    if not isinstance(globals()[var], typ):\n        resultate.append(f'‚ùå `{var}` hat nicht den richtigen Datentyp\\n\\n')\n        fehler += 1\n        continue\n    \n    if globals()[var] != wert:\n        resultate.append(f'‚ùå `{var}` hat den falschen Wert: {globals()[var]}\\n\\n')\n        fehler += 1\n        continue\n        \n    resultate.append(f'‚úÖ `{var}` ist korrekt!\\n\\n')\n\nif fehler > 0:\n    message = \"\\n\".join(resultate)\n    __ide_prompt(f'Es gibt noch {fehler} Fehler:\\n\\n{message}', 'Nochmal versuchen')\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt('Super! üéâ Alle Fragen wurden richtig beantwortet!', 'Fertig')",
          "language": "python-pro",
          "program": "# Schreibe hier deine Antworten auf\n\nhauptstadt_deutschland = None\nende_des_zweiten_weltkriegs = None\nein_viertel_als_dezimalzahl = None"
        },
        "deps": [
          10002
        ]
      },
      {
        "filename": "Hin_und_her.json",
        "x": 850,
        "y": 90,
        "id": 142,
        "content": {
          "version": "v1",
          "title": "Hin und her",
          "description": "Zeigt mal, ihr beiden, ob ihr auch mit etwas Chaos klarkommt. Die Variablen wurden ohne erkennbares Muster hin und her gesetzt.\n\nSchaut euch das Script an und findet heraus, welchen Wert die Variable `erde` am Ende des Programms hat. Wenn du die Antwort wei√üt, dann klicke auf Start.",
          "tasks": [
            {
              "title": "Ein Durcheinander",
              "start": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      1,
                      0,
                      3,
                      0
                    ],
                    [
                      2,
                      0,
                      0,
                      1,
                      3
                    ],
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      1,
                      0,
                      3,
                      0
                    ],
                    [
                      2,
                      0,
                      0,
                      1,
                      3
                    ],
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Haha, von dem bisschen Chaos werden wir uns nicht verwirren lassen!\", \"Nat√ºrlich nicht!\")\n\nergebnis = input(\"Welchen Wert hat am Ende des Programms die Variable Erde?\")\n\nif ergebnis != \"hase\":\n    __ide_prompt(\"Das ist leider nicht die richtige Antwort.\", \"Nochmal\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(\"erde = himmel, himmel = blau, blau = a, a = \\\"hase\\\" - so beh√§lten wir den √úberblick :)\")",
          "language": "python-pro",
          "program": "a = \"hase\"\nb = \"fuchs\"\nc = \"eule\"\n\nrot = c\ngr√ºn = b\nblau = a\n\nhimmel = a\nerde = rot\nhimmel = blau\nerde = himmel\n\n# Welchen Wert hat `erde` hier?"
        },
        "deps": [
          10002
        ]
      }
    ],
    "x": 640,
    "y": 1640
  },
  {
    "id": 10003,
    "dirName": "020-eingabe-ausgabe",
    "title": "2. Interaktionen",
    "originalTitle": "Interaktionen",
    "description": "# üí¨ Kapitel 2: Interaktionen\r\n\r\n\"Wir kommen voran!\", feiert Karol mit einem strahlenden L√§cheln. \"Mal sehen, was uns als N√§chstes erwartet. Davor muss ich mal kurz.\" Sie verschwindet f√ºr ein paar Minuten und du bist mit Emi alleine. Du nutzt die Zeit, dich ein wenig im Atelier umzusehen. Die W√§nde sind √ºbers√§t mit bunten Bildern, und du bist √ºberrascht, dass viele von Karols Kunstwerken fast kindlich anmuten ‚Äì farbenfroh, fantasievoll und voller Lebensfreude.\r\n\r\nEmi tippt w√§hrenddessen konzentriert auf ihrem Laptop. \"Willst du auch einen Blick darauf werfen?\", fragt sie pl√∂tzlich, etwas weniger schroff als zuvor. Du nickst und siehst Codezeilen √ºber ihren Bildschirm flimmern. Aber sobald Karol wieder da ist, klappt sie den Laptop wieder zu und ist wieder ganz ernst.\r\n\r\n\"Was f√ºr Kunst machst du eigentlich?\", fragst du, als Karol wieder erscheint. Die alte Dame antwortet mit einem verschmitzten Grinsen: \"Haha, das ist eine komplizierte Sache. Fr√ºher habe ich mich mit abstrakter Kunst besch√§ftigt, aber heute male ich haupts√§chlich Bilder, die ich an Schulen verschenke, um die Kinder dort ein wenig zu inspirieren...\"\r\n\r\nKarol schaut f√ºr einen kurzen Moment vertr√§umt in die Ferne, dann findet sie sich wieder: \"Kunst und Programmieren haben √ºbrigens mehr gemeinsam, als man denkt ‚Äì bei beiden geht es um Kreativit√§t und Kommunikation!\"\r\n\r\nEmi √ºbernimmt wieder: \"Kommunikation ist das perfekte Stichwort. Jetzt zeige ich euch, wie man dem Computer das Sprechen beibringt und er euch fragen stellen kann.\"\r\n\r\n## 1. Die `print()`-Funktion ‚Äì sprich mit der Welt!\r\n\r\n\"Mit `print()` kannst du alles ausgeben ‚Äì Texte, Zahlen oder Variablen\", erkl√§rt Emi und tippt ein paar Beispiele:\r\n\r\n```python\r\nprint(\"Hallo Welt! üåç\")\r\n\r\nprint(42)\r\n\r\nalter = 17\r\nprint(alter)\r\n```\r\n\r\n\"So einfach ist das?\", fragt Karol erstaunt. \"Ja, so einfach\", best√§tigt Emi, \"du kannst alles, was du zeigen m√∂chtest, zwischen die Klammern schreiben.\"\r\n\r\n## 2. Mit `f-Strings` Texte bauen\r\n\r\n\"Jetzt wird's interessant\", f√§hrt Emi fort. \"Stell dir vor, du willst nicht nur einzelne Informationen ausgeben, sondern sie in einen sch√∂nen Satz packen.\"\r\n\r\n\"Wie bei einer Bildunterschrift in einer Ausstellung?\", fragt Karol.\r\n\r\n\"Genau! Daf√ºr sind _f-Strings_ super praktisch\", erkl√§rt Emi. \"Du kannst damit Text mit Variablen mischen. Schau mal:\"\r\n\r\n```python\r\nbildart = \"√ñlgem√§lde\"\r\njahr = 1995\r\n\r\nprint(f\"Ein {bildart} aus dem Jahr {jahr}.\")\r\n\r\n# -> Ein √ñlgem√§lde aus dem Jahr 1995.\r\n```\r\n\r\n\"Das f am Anfang des Textes ist wichtig\", betont Emi. \"Es bedeutet 'formatierter String'. Und in die geschweiften Klammern schreibst du die Variablen, deren Werte du einf√ºgen m√∂chtest.\"\r\n\r\n## 3. Die `input()`-Funktion ‚Äì stelle Fragen!\r\n\r\nDu meintest, der Computer kan auch Fragen stellen?\", hakt Karol nach. \"Daf√ºr haben wir die `input()`-Funktion\", antwortet Emi und tippt weiter:\r\n\r\n```python\r\n# Einfache Eingabe\r\nname = input(\"Wie hei√üt du? \")\r\n\r\nprint(f\"Hallo, {name}! üòä\")\r\n```\r\n\r\n\"Probier's aus\", fordert sie dich auf. Du tippst deinen Namen ein und das Programm begr√º√üt dich pers√∂nlich. Karol ist begeistert und klatscht in die H√§nde.\r\n\r\n\"Die Zeichenkette in den Klammern ist die Frage, die angezeigt wird\", erkl√§rt Emi. \"Und was der Benutzer eingibt, wird in der Variable gespeichert.\r\n\r\n## 4. Typumwandlung ‚Äì mach aus Text eine Zahl\r\n\r\nEs gibt aber einen kleinen Haken, `input` gibt immer nur einen Text zur√ºck. Wenn ihr eine Zahl abfragen wollt, muss dieser noch in eine Zahl umwandelt werden. So, jetzt wisst ihr Bescheid, wenn euer Programm sp√§ter einen Fehler wirft, dann beschwert euch nicht, ich h√§tte es euch nicht erkl√§rt!\"\r\n\r\n```python\r\n# String zu Integer\r\ngeburtsjahr = int(input(\"Geburtsjahr: \"))\r\n\r\naktuelles_jahr = 2025\r\nalter = aktuelles_jahr - geburtsjahr\r\nprint(f\"Du bist etwa {alter} Jahre jung! üéÇ\")\r\n```\r\n\r\n\"Die `int()`-Funktion wandelt den Text in eine ganze Zahl um\", erkl√§rt Emi. \"F√ºr Kommazahlen w√ºrden wir `float()` verwenden.\"\r\n\r\n## üí° Wichtigste Erkenntnisse\r\n\r\nKarol bittet dich, einen Blick √ºber ihre Notizen zu werfen und diese zu √ºberpr√ºfen:\r\n\r\n- `print()` gibt Informationen aus ‚Äì deine Botschaft an die Welt\r\n- `input()` nimmt Eingaben entgegen ‚Äì immer als Text (String)\r\n- `f-Strings` mit `{variable}` sind perfekt, um Texte mit Daten zu mischen\r\n- Mit `int()` und `float()` wandelst du Text in Zahlen um\r\n\r\n\"Und, passt alles?\". Du sieht keine Probleme und nickst. Du sprichst Emi an: \"Lass mal raten, Dozentin, jetzt ist wieder Zeit f√ºr √úbungsaufgaben?\"\r\n\r\nEmi l√§chelt ‚Äì zum ersten Mal, seit du hier bist. \"Genau. Ab an die Aufgaben ihr beiden! Hop, hop, worauf wartet ihr noch? üéÆüí¨\"\r\n",
    "image": "/story/2.jpg",
    "quests": [
      {
        "filename": "Begr√º√üung.json",
        "x": 660,
        "y": 37,
        "id": 121,
        "content": {
          "version": "v1",
          "title": "Begr√º√üung",
          "description": "Eine pers√∂nliche Begr√º√üung f√ºhlt sich doch gleich viel w√§rmer an. Erg√§nze das Script:\n\n- Frage mit `input()` den Namen ab und weise den Wert einer Variable zu\n- Gib eine Begr√º√üung aus, nutze einen f-string.",
          "tasks": [
            {
              "title": "Ein L√§cheln",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Probieren wir das Script aus.\", \"Begegnung starten\")\n\n__ide_run_client()\n\n# Pr√ºfe Eingabe √ºber input()\ninputs = __ide_get_inputs()\nif len(inputs) == 0:\n    __ide_prompt(\"Du musst den Namen mit `input()` abfragen.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Extrahiere den eingegebenen Namen\nname = inputs[0]\n\n# Pr√ºfe Ausgabe\noutputs = __ide_get_outputs()\nif len(outputs) == 0:\n    __ide_prompt(\"Du hast keine Begr√º√üung ausgegeben. Nutze einen f-string mit `print()`.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Pr√ºfe, ob der Name in der Ausgabe verwendet wurde\nlast_output = outputs[-1].strip()\nif name not in last_output:\n    __ide_prompt(f\"Deine Begr√º√üung enth√§lt nicht den Namen '{name}'. Nutze einen f-string, der den Namen einbaut.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n\n__ide_set_progress(True)\n__ide_prompt(f\"Super! Du hast {name} erfolgreich mit einem f-string begr√º√üt!\", \"Weiter\")",
          "language": "python-pro",
          "program": "\nname = \"\" # TODO: ersetze mit input(\"Wie lautet dein Name?\")\n\nprint(f\"Hallo, X\") # TODO: ersetze X mit dem Namen\n"
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Harry_Potter_Fan.json",
        "x": 500,
        "y": 188,
        "id": 122,
        "content": {
          "version": "v1",
          "title": "Harry Potter Fan",
          "description": "Meine Tante ist ein geheimer Harry Potter Fan, diese Aufgabe sollte f√ºr sie leicht zu machen sein.\n\nSchreibe ein Script, dass drei bekannte Tatsachen abfragt. Nutze f√ºr jede Tatsache einmal `input` und speichere die Informationen in den passenden Variablen.\n\nAchte bei der dritten Tatsache darauf, die Eingabe mit `int(input())` in eine Ganzzahl umzuwandeln.\n\n> 7 - ∆Éƒ± çp«ùH - …•…î áƒ±ppƒ±n·Ωâ :u«ù án…ê◊ü u«ù á…πo ç áu‚àÄ «ùƒ±·ó°",
          "tasks": [
            {
              "title": "Initialien",
              "start": {
                "dimX": 8,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      1,
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      1,
                      1,
                      0,
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      true,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen im Zaubererquiz!\", \"Accio Fragen!\")\n\n__ide_run_client()\n\n# √úberpr√ºfe die Anzahl der Eingaben\ninputs = __ide_get_inputs()\nif len(inputs) < 3:\n    __ide_prompt(\"Du hast nicht alle drei Fragen gestellt. Nutze dreimal `input()`.\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# √úberpr√ºfe die Variablen im Client-Code\nvars_to_check = ['sport', 'name_harrys_eule', 'anzahl_horkruxe']\nmissing_vars = []\n\nfor var in vars_to_check:\n    if var not in globals():\n        missing_vars.append(var)\n\nif missing_vars:\n    __ide_prompt(f\"Es fehlen folgende Variablen: {', '.join(missing_vars)}\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# √úberpr√ºfe die Datentypen\nif not isinstance(sport, str):\n    __ide_prompt(\"Die Variable 'sport' sollte ein String sein.\", \"Nochmal versuchen\")\n    __ide_exit()\n    \nif not isinstance(name_harrys_eule, str):\n    __ide_prompt(\"Die Variable 'name_harrys_eule' sollte ein String sein.\", \"Nochmal versuchen\")\n    __ide_exit()\n    \nif not isinstance(anzahl_horkruxe, int):\n    __ide_prompt(\"Die Variable 'anzahl_horkruxe' sollte eine Ganzzahl sein. Hast du int(input()) verwendet?\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Optionale √úberpr√ºfung der korrekten Antworten\nif sport.lower() == \"quidditch\" and name_harrys_eule.lower() == \"hedwig\" and anzahl_horkruxe == 7:\n    __ide_prompt(\"Perfekt! Du bist ein echter Harry Potter Fan! ‚ö°\", \"Wingardium Leviosa!\")\nelse:\n    __ide_prompt(\"Dein Code funktioniert, aber √ºberpr√ºfe nochmal deine Antworten. Die Hinweise stehen √ºbrigens auf dem Kopf in der Aufgabenstellung. üòâ\", \"Ok\")\n\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Beispiel\nsport = input(\"Welche Sportart ist zentral f√ºr Harry Potter?\")\n\n# TODO\n# name_harrys_eule = \n\n# anzahl_horkruxe = "
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Explosion.json",
        "x": 650,
        "y": 170,
        "id": 145,
        "content": {
          "version": "v1",
          "title": "Explosion",
          "description": "Wollt ihr etwas Spa√ü haben? Das bleibt unter uns, ok? Mit f-Strings kann man eine Art Text-Bombe bauen, indem ihr einen Text wiederholt.\n\nJedes boom wird aus dem vorherigen boom gebaut, erg√§nzt noch `boom4` bis `boom6` und freut euch auf die Explosion!\n\nVergesst nicht, die letzte Zeile zu aktualisieren.",
          "tasks": [
            {
              "title": "Explosion",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 7,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Emi: 'Zur√ºcktreten! Diese Textbombe k√∂nnte gr√∂√üer werden als erwartet!'\", \"Explosion starten\")\n\n# F√ºhre den Client-Code aus\n__ide_run_client()\n\n# √úberpr√ºfe, ob die Variablen korrekt definiert wurden\nvars_to_check = ['boom', 'boom2', 'boom3', 'boom4', 'boom5', 'boom6']\nmissing_vars = []\n\nfor var in vars_to_check:\n    if var not in globals() or globals()[var] is None:\n        missing_vars.append(var)\n\nif missing_vars:\n    __ide_prompt(f\"Emi: 'Du hast nicht alle boom-Variablen definiert. Es fehlen: {', '.join(missing_vars)}'\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# √úberpr√ºfe, ob die Variablen korrekt aufgebaut wurden\nexpected_boom = \"BOOOOM\"\nexpected_boom2 = f\"{expected_boom}-{expected_boom}-{expected_boom}\"\nexpected_boom3 = f\"{expected_boom2}-{expected_boom2}-{expected_boom2}\"\nexpected_boom4 = f\"{expected_boom3}-{expected_boom3}-{expected_boom3}\"\nexpected_boom5 = f\"{expected_boom4}-{expected_boom4}-{expected_boom4}\"\nexpected_boom6 = f\"{expected_boom5}-{expected_boom5}-{expected_boom5}\"\n\nwrong_vars = []\nif boom != expected_boom:\n    wrong_vars.append('boom')\nif boom2 != expected_boom2:\n    wrong_vars.append('boom2')\nif boom3 != expected_boom3:\n    wrong_vars.append('boom3')\nif boom4 != expected_boom4:\n    wrong_vars.append('boom4')\nif boom5 != expected_boom5:\n    wrong_vars.append('boom5')\nif boom6 != expected_boom6:\n    wrong_vars.append('boom6')\n\nif wrong_vars:\n    __ide_prompt(f\"Emi: 'Die folgenden boom-Variablen sind nicht korrekt definiert: {', '.join(wrong_vars)}. Achte darauf, das f-String-Muster fortzusetzen.'\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# √úberpr√ºfe, ob boom6 ausgegeben wurde\noutputs = __ide_get_outputs()\nif len(outputs) == 0:\n    __ide_prompt(\"Emi: 'Du hast nichts ausgegeben! Vergiss nicht, print() zu verwenden.'\", \"Nochmal versuchen\")\n    __ide_exit()\n\nlast_output = outputs[-1].strip()\nif last_output != expected_boom6:\n    __ide_prompt(\"Emi: 'Du musst boom6 ausgeben, nicht irgendeine andere Variable.'\", \"Nochmal versuchen\")\n    __ide_exit()\n\n# Alles korrekt\n__ide_set_progress(True)\n__ide_prompt(\"Karol klatscht begeistert: 'WOW! Diese Textketten-Explosion ist fantastisch! Das erinnert mich an meine Feuerwerk-Kunstinstallation von 1987!'\", \"Weiter\")",
          "language": "python-pro",
          "program": "boom = \"BOOOOM\"\n\nboom2 = f\"{boom}-{boom}-{boom}\"\n\nboom3 = f\"{boom2}-{boom2}-{boom2}\"\n\nboom4 = None\n\nboom5 = None\n\nboom6 = None\n\nprint(boom3)"
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Runen.json",
        "x": 400,
        "y": 100,
        "id": 120,
        "content": {
          "version": "v1",
          "title": "Runen",
          "description": "\"Wei√üt du was, Emi? Diese f-Strings erinnern mich an meine magische Runen-Sammlung!\", ruft Karol aufgeregt und kramt in einer Schublade. Emi st√∂hnt: \"Tante, nicht schon wieder deine Fantasie-Geschichten...\"\n\nKarol l√§chelt verschmitzt: \"Aber diese Runen sind echt magisch! Mit f-Strings werden sie zum Leben erweckt.\"\n\nIn der magischen Beschw√∂rung m√ºssen alle `X` mit dem Wert der Variable `rune` ersetzt werden. Nutze f-Strings! Sei vorsichtig und l√∂sche keine der Tilden (`~`).",
          "tasks": [
            {
              "title": "magische Rune",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 6,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      true,
                      true,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "runes = [' ‚úø⁄ø⁄∞€£‚Äî ', '(=^ÔΩ•ÔΩ™ÔΩ•^=))ÔæâÂΩ°‚òÜ', '\t„ÉΩ(ÔΩÄ–î¬¥)‚äÉ‚îÅ‚òÜÔæü. * ÔΩ• ÔΩ°Ôæü,']\n\n__ide_prompt(\"Karol breitet ihre H√§nde aus: 'Die gro√üe Beschw√∂rung steht bevor! Konzentriere dich auf die Runen!'\", \"Runen aktivieren\")\n\n\nfor rune in runes:\n    def ladeRune():\n        return rune\n    __ide_run_client(globals=[\"ladeRune\"])\n    lastOutput = __ide_get_outputs()[-1].strip()\n    expected = f\"~~~~~~~{rune}~~~~~{rune}~~~~~{rune}~~~~\"\n    if lastOutput != expected:\n        __ide_prompt(\"Emi sch√ºttelt den Kopf: 'Die Beschw√∂rung ist fehlgeschlagen. Du musst alle X durch die Variable rune ersetzen - mit f-Strings!'üí•\", \"Korrigieren\")\n        __ide_exit()\n    __ide_sleep(0.8)\n\n__ide_set_progress(True)\n__ide_prompt(\"'Fantastisch!' Karol tanzt begeistert durch den Raum. 'Siehst du, Emi? Ich hab's dir doch gesagt - Programmieren ist auch eine Art Magie!' Emi verdreht die Augen, kann sich aber ein kleines L√§cheln nicht verkneifen.\", \"Weiter\")",
          "language": "python-pro",
          "program": "rune = ladeRune()\n\nprint(f\"~~~~~~~X~~~~~X~~~~~X~~~~\")"
        },
        "deps": [
          10003
        ]
      },
      {
        "filename": "Systemstatus.json",
        "x": 420,
        "y": -20,
        "id": 119,
        "content": {
          "version": "v1",
          "title": "Systemstatus",
          "description": "\"Das mit den f-Strings muss ich unbedingt f√ºr meine Weltraum-Kunstserie nutzen!\", ruft Karol begeistert. Emi verdreht die Augen: \"Hab ich ja gesagt, dass das n√ºtzlich ist.\"\n\nIn diesem Programm f√ºr die Raketensteuerung m√ºssen Temperatur und Geschwindigkeit √ºberwacht werden.\n\nErsetze `X` und `Y` mit geschweiften Klammern `{}` und setze die passenden Variablen ein. So soll die Ausgabe aussehen:\n\n**Triebwerkstemperatur: 555 ¬∞C, Geschwindigkeit: 423 km/h**",
          "tasks": [
            {
              "title": "Instrumentenanzeige",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 3,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 2,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      true
                    ],
                    [
                      false,
                      true
                    ],
                    [
                      true,
                      false
                    ],
                    [
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 3,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      0,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 2,
                  "dimY": 4,
                  "offsetX": 3,
                  "offsetY": 2,
                  "data": [
                    [
                      false,
                      true
                    ],
                    [
                      false,
                      true
                    ],
                    [
                      true,
                      false
                    ],
                    [
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Emi: 'Achtet auf die Messwerte! T minus 3, 2, 1, ...'.\", \"Start\")\n\nts = [0, 500, 800, 1100, 1300, 1500, 1665, 1780, 1990, 2102]\n\nvs = [0, 10, 26, 45, 56, 78, 98, 135, 180, 240]\n\nfor i in range(10):\n    t = ts[i]\n    v = vs[i]\n    def ladeTemperatur():\n        return t\n\n    def ladeGeschwindigkeit():\n        return v\n\n    __ide_run_client(globals=[\"ladeTemperatur\", \"ladeGeschwindigkeit\"])\n\n    lastOutput = __ide_get_outputs()[-1].strip()\n    expected = f\"Triebwerkstemperatur: {t} ¬∞C, Geschwindigkeit: {v} km/h\"\n    if lastOutput != expected:\n        __ide_prompt(\"Karol: 'Statusanzeige fehlerhaft! Die Messwerte werden nicht richtig dargestellt. Hast du die f-Strings richtig verwendet?'\", \"Korrigieren\")\n        __ide_exit()\n\n    __ide_sleep(0.3)\n\n__ide_set_progress(True)\n__ide_prompt(\"Karol jubelt: 'Start erfolgreich! üöÄ Das k√∂nnte ich in meinem n√§chsten Bild umsetzen!'\")",
          "language": "python-pro",
          "program": "# Diese Funktionen holen aktuelle Messwerte\ntemperatur = ladeTemperatur()\ngeschwindigkeit = ladeGeschwindigkeit()\n\n# Gib die Messwerte mit f-Strings aus\nprint(f\"Triebwerkstemperatur: X ¬∞C, Geschwindigkeit: Y km/h\")"
        },
        "deps": [
          10003
        ]
      }
    ],
    "x": 520,
    "y": 1930
  },
  {
    "id": 10004,
    "dirName": "030-bedingte-anweisungen",
    "title": "3. Bedingte Anweisungen",
    "originalTitle": "Bedingte Anweisungen",
    "description": "# üß† Kapitel 3: Dein Code wird schlau! Mit Bedingungen entscheiden lernen\r\n\r\nPl√∂tzlich klingelt es an der T√ºr. \"Ah, das m√ºssen unsere anderen G√§ste sein\", sagt Karol und huscht zur T√ºr. Kurz darauf kommt sie mit zwei Jungs zur√ºck, die etwa in deinem Alter sind. \"Das sind Max und Tim, sie sind extra angereist\", stellt sie die beiden vor. \"Ihre Mutter ist Informatikerin und hat ihnen schon ein bisschen das Programmieren beigebracht.\"\r\n\r\nMax, der Gr√∂√üere der beiden mit einem gr√ºnen T-Shirt und zerzausten blonden Haaren, nickt dir freundlich zu. Tim, sein kleinerer Bruder mit einer auff√§lligen roten Brille, strahlt und fragt sofort: \"Habt ihr schon mit Schleifen angefangen? Oder Funktionen?\"\r\n\r\nEmi verdreht leicht die Augen. \"Wir sind gerade bei Bedingten Anweisungen. Die beiden haben schon Variablen und Ein-/Ausgabe geschafft.\"\r\n\r\n\"Cool, dann sind wir ja genau richtig\", sagt Max und setzt sich neben dich. \"Bedingte Anweisungen sind super wichtig. Damit wird der Code erst richtig interessant!\"\r\n\r\nEmi f√§hrt fort: \"In der Programmierung ist das ein entscheidender Schritt: eurem Code beizubringen, verschiedene Situationen zu erkennen und entsprechend zu handeln. Genau wie eine Wetterstation erkennen muss, wann ein Sturm aufzieht.\"\r\n\r\n## üö¶ If-Statement: Die Grundlage aller Entscheidungen\r\n\r\nEmi zeigt ein einfaches Beispiel am Computer:\r\n\r\n```python\r\nampelfarbe = \"gr√ºn\"\r\n\r\nif ampelfarbe == \"gr√ºn\":\r\n    print(\"Losfahren! üöó\")\r\n```\r\n\r\n\"Das ist wie eine Verzweigung auf deinem Weg\", erkl√§rt sie. \"Der Code fragt: 'Ist die Ampel gr√ºn?' Wenn ja, dann fahre los. Wenn nicht, dann mache... nichts in diesem Beispiel.\"\r\n\r\nüëâ **So funktioniert's:**\r\n\r\n- `if` = \"falls\" oder \"wenn\"\r\n- `==` pr√ºft auf Gleichheit (Achtung: nicht verwechseln mit `=`, das ist f√ºr Zuweisungen!)\r\n- Der einger√ºckte Code wird **nur** ausgef√ºhrt, wenn die Bedingung wahr ist\r\n- Die Einr√ºckungen (4 Leerzeichen) sind in Python Pflicht ‚Äì sie zeigen, welcher Code zur Bedingung geh√∂rt\r\n\r\n## üöß Else: Der \"Alles andere\"-Fall\r\n\r\n\"Aber was, wenn die Ampel **nicht** gr√ºn ist?\", fragt Emi. Sie passt den Code an:\r\n\r\n```python\r\nalter = 15\r\n\r\nif alter >= 18:\r\n    print(\"Du darfst w√§hlen! üó≥Ô∏è\")\r\nelse:\r\n    # Wird ausgef√ºhrt, weil 15 < 18\r\n    print(\"Noch etwas Geduld... üïí\")\r\n```\r\n\r\n\"Mit `else` hast du einen Plan B! Wenn die Bedingung nicht zutrifft, wird stattdessen der Code im `else`-Block ausgef√ºhrt. So hat dein Programm f√ºr jede Situation eine Antwort.\"\r\n\r\n## üîÑ Elif: F√ºr komplexe Entscheidungen\r\n\r\n\"Manchmal gibt es mehr als nur zwei M√∂glichkeiten\", sagt Emi und zaubert ein neues Beispiel hervor:\r\n\r\n```python\r\nnote = 2.3\r\n\r\nif note == 1.0:\r\n    print(\"Traumnote! üåü\")\r\nelif note <= 2.0:\r\n    print(\"Super gemacht! üëç\")\r\nelif note <= 3.0:\r\n    # Wird ausgef√ºhrt, weil 2.3 <= 3.0\r\n    print(\"Gut, geht besser üòä\")\r\nelse:\r\n    print(\"Da m√ºssen wir √ºben! üí™\")\r\n```\r\n\r\n\"Mit `elif` (kurz f√ºr 'else if') kannst du mehrere Bedingungen nacheinander pr√ºfen. Sobald eine davon zutrifft, wird der zugeh√∂rige Code ausgef√ºhrt und die restlichen Bedingungen werden √ºbersprungen.\"\r\n\r\n## üîç Vergleichsoperatoren ‚Äì Unsere Werkzeuge\r\n\r\n\"Um Entscheidungen zu treffen, brauchst du die richtigen Werkzeuge\", erkl√§rt Emi und l√§sst eine Tabelle erscheinen:\r\n\r\n| Operator | Bedeutung      | Beispiel        |\r\n| -------- | -------------- | --------------- |\r\n| `==`     | gleich         | `5 == 5` ‚Üí True |\r\n| `!=`     | ungleich       | `3 != 5` ‚Üí True |\r\n| `>`      | gr√∂√üer als     | `10 > 5` ‚Üí True |\r\n| `<`      | kleiner als    | `3 < 2` ‚Üí False |\r\n| `>=`     | gr√∂√üer gleich  | `7 >= 7` ‚Üí True |\r\n| `<=`     | kleiner gleich | `4 <= 5` ‚Üí True |\r\n\r\n\"Diese Operatoren sind wie deine Sinne ‚Äì sie helfen dir, die Welt um dich herum zu verstehen und zu bewerten.\"\r\n\r\n## üß© Logische Operatoren: Kombiniere Bedingungen\r\n\r\n\"Manchmal m√ºssen mehrere Bedingungen gleichzeitig erf√ºllt sein\", f√§hrt Emi fort:\r\n\r\n**AND** (beides muss stimmen):\r\n\r\n```python\r\nalter = 25\r\neinkommen = 2500\r\n\r\nif alter >= 18 and einkommen > 2000:\r\n    print(\"Kredit m√∂glich üí∞\")  # Beide Bedingungen wahr\r\n```\r\n\r\n**OR** (mindestens eins muss stimmen):\r\n\r\n```python\r\nwetter = \"sonnig\"\r\ntemperatur = 28\r\n\r\nif wetter == \"sonnig\" or temperatur > 25:\r\n    # Wird ausgef√ºhrt, weil wetter == \"sonnig\"\r\n    print(\"Eiszeit! üç¶\")\r\n```\r\n\r\n**NOT** (Umkehrung):\r\n\r\n```python\r\nlogin_erfolgreich = False\r\n\r\nif not login_erfolgreich:\r\n    # Wird ausgef√ºhrt, weil login_erfolgreich False ist\r\n    print(\"Bitte neu anmelden! üîí\")\r\n```\r\n\r\n\"Mit diesen drei Operatoren ‚Äì `and`, `or` und `not` ‚Äì kannst du komplexe Entscheidungen programmieren, genau wie das menschliche Gehirn.\"\r\n\r\n## üèÜ Jetzt bist du dran!\r\n\r\n\"Mit diesem Wissen kannst du jetzt richtig m√§chtige Programme schreiben\", sagt Emi begeistert. \"Du kannst deinem Code beibringen, intelligente Entscheidungen zu treffen ‚Äì wie ein Mensch. Jetzt los, probiert euch an den √úbungsaufgaben aus. Und seid nicht √ºberrascht: diesmal habe ich mir ein paar kreative Sachen ausgedacht!\"\r\n",
    "image": "/story/3.jpg",
    "quests": [
      {
        "filename": "Zaubertrankpr√ºfung.json",
        "x": 620,
        "y": 130,
        "id": 132,
        "content": {
          "version": "v1",
          "title": "Zaubertrankpr√ºfung",
          "description": "Als Zauberlehrling musst du die richtigen Zutaten f√ºr deinen Zaubertrank w√§hlen:\n\n- Frage mit `input()` nach der Temperatur des Kessels in Grad (bereits programmiert)\n- Gib \"Perfekt! F√ºge die Drachenblut-Essenz hinzu.\" aus, wenn die Temperatur √ºber 90 Grad liegt\n- Gib \"Zu kalt! Erh√∂he die Flammen unter dem Kessel.\" aus, wenn die Temperatur 90 Grad oder weniger ist\n\nVorlage:\n\n```py\nif temperatur > ...:\n    ...\nelse:\n    ...\n```",
          "tasks": [
            {
              "title": "Zaubertrankpr√ºfung",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Als Zauberlehrling stehst du vor einem dampfenden Kessel und musst entscheiden, ob er die richtige Temperatur f√ºr die n√§chste Zutat erreicht hat.\", \"Trank brauen beginnen\")\n\n# Initialisiere Tracking-Variablen f√ºr getestete F√§lle\ntested_hot = False\ntested_cold = False\n\nwhile not (tested_hot and tested_cold):\n    __ide_run_client()\n\n    # Pr√ºfe, ob eine Eingabe gemacht wurde\n    inputs = __ide_get_inputs()\n    if len(inputs) == 0:\n        __ide_prompt(\"Du musst nach der Kesseltemperatur fragen. Verwende daf√ºr `input()`.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Pr√ºfe, ob eine Ausgabe vorhanden ist\n    outputs = __ide_get_outputs()\n    if len(outputs) == 0:\n        __ide_prompt(\"Du hast keine Ausgabe gemacht. Nutze `print()` f√ºr die Ausgabe.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Versuche, die eingegebene Temperatur zu ermitteln\n    valid_number = False\n    try:\n        temperatur = float(inputs[-1].replace(',', '.'))\n        valid_number = True\n    except:\n        __ide_prompt(\"Die eingegebene Temperatur konnte nicht als Zahl erkannt werden.\", \"Nochmal versuchen\")\n        continue\n\n    # Ermittle den erwarteten Temperaturzustand\n    if temperatur > 90:\n        expected_state = \"perfekt\"\n        tested_hot = True\n    else:  # temperatur <= 90\n        expected_state = \"kalt\"\n        tested_cold = True\n\n    # √úberpr√ºfe, ob die richtige Ausgabe gemacht wurde\n    last_output = outputs[-1].lower()\n    if expected_state not in last_output:\n        __ide_prompt(f\"Die Ausgabe passt nicht zur Temperatur. Bei {temperatur} Grad sollte deine Ausgabe '{expected_state}' enthalten.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Zeige an, welche F√§lle bereits getestet wurden und welche noch fehlen\n    remaining_cases = []\n    if not tested_hot:\n        remaining_cases.append(\"hei√üer Kessel (√ºber 90 Grad)\")\n    if not tested_cold:\n        remaining_cases.append(\"kalter Kessel (90 Grad oder weniger)\")\n    \n    if remaining_cases:\n        case_list = \", \".join(remaining_cases)\n        __ide_prompt(f\"Zauberhafte Arbeit! Du hast die {expected_state}e Temperatur richtig erkannt. Teste noch: {case_list}\", \"Weiter brauen\")\n\n# Wenn alle Tests bestanden wurden\n__ide_set_progress(True)\n__ide_prompt(\"Ausgezeichnet! üéâ Du hast alle Temperaturzust√§nde richtig erkannt und wei√üt jetzt genau, wann du die Drachenblut-Essenz hinzuf√ºgen kannst. Deine F√§higkeiten als Zauberlehrling verbessern sich!\", \"Weiter\")\n",
          "language": "python-pro",
          "program": "# Zaubertrankpr√ºfung: Bestimme die Kesseltemperatur\n# 1. Frage nach der Kesseltemperatur\n# 2. Bestimme, ob der Kessel hei√ü genug ist\n# 3. Gib die entsprechende Anweisung aus\n\n# TODO: Schreibe deinen Code hier\ntemperatur = float(input(\"Wie hei√ü ist der Kessel in Grad?\"))"
        },
        "deps": [
          10004
        ]
      },
      {
        "filename": "Weltraum_Navigation.json",
        "x": 770,
        "y": -60,
        "id": 131,
        "content": {
          "version": "v1",
          "title": "Weltraum-Navigation",
          "description": "Nach dem erfolgreichen Start deines Raumschiffs ist die Navigationseinheit f√ºr den interplanetaren Kurs bereit. Das System muss verschiedene Gravitationsfelder analysieren:\n\n- Frage mit `input()` nach einem Gravitationswert (bereits programmiert)\n- Gib \"Positives Gravitationsfeld - Antrieb verst√§rken!\" aus, wenn der Wert gr√∂√üer als 0 ist\n- Gib \"Negatives Gravitationsfeld - Bremssysteme aktivieren!\" aus, wenn der Wert kleiner als 0 ist\n- Gib \"Neutrale Zone - Schwebemodus aktivieren!\" aus, wenn der Wert gleich 0 ist\n\nVorlage:\n\n```py\nif graviation < 0:\n    print(\"Negatives Gravitationsfeld - Bremssysteme aktivieren!\")\nelif ...:\n    ...\nelse:\n    ...\n```",
          "tasks": [
            {
              "title": "Gravitationsfeld analysieren",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 4,
                  "dimY": 4,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Nach dem erfolgreichen Start deines Raumschiffs und der System√ºberpr√ºfung navigierst du nun durch verschiedene Gravitationsfelder. Du musst alle drei Arten von Gravitationsfeldern (positiv, negativ und neutral) analysieren, um die Mission abzuschlie√üen.\", \"Mission starten\")\n\n# Initialisiere Tracking-Variablen f√ºr getestete F√§lle\ntested_positive = False\ntested_negative = False\ntested_zero = False\n\nwhile not (tested_positive and tested_negative and tested_zero):\n    __ide_run_client()\n\n    # Pr√ºfe, ob eine Eingabe gemacht wurde\n    inputs = __ide_get_inputs()\n    if len(inputs) == 0:\n        __ide_prompt(\"Du musst nach einem Gravitationswert fragen. Verwende daf√ºr `input()`.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Pr√ºfe, ob eine Ausgabe vorhanden ist\n    outputs = __ide_get_outputs()\n    if len(outputs) == 0:\n        __ide_prompt(\"Du hast keine Ausgabe gemacht. Nutze `print()` f√ºr die Ausgabe.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Versuche, den eingegebenen Gravitationswert zu ermitteln\n    valid_number = False\n    try:\n        gravitation = float(inputs[-1].replace(',', '.'))\n        valid_number = True\n    except:\n        __ide_prompt(\"Der eingegebene Gravitationswert konnte nicht als Zahl erkannt werden.\", \"Nochmal versuchen\")\n        continue\n\n    # Ermittle den erwarteten Gravitationstyp\n    if gravitation > 0:\n        expected_type = \"positiv\"\n        tested_positive = True\n    elif gravitation < 0:\n        expected_type = \"negativ\"\n        tested_negative = True\n    else:  # gravitation == 0\n        expected_type = \"neutral\"\n        tested_zero = True\n\n    # √úberpr√ºfe, ob der richtige Gravitationstyp ausgegeben wurde\n    last_output = outputs[-1].lower()\n    if expected_type not in last_output:\n        __ide_prompt(f\"Die Ausgabe passt nicht zum Gravitationsfeld. Bei dem Wert {gravitation} sollte die Ausgabe '{expected_type}' enthalten.\", \"Korrigieren\")\n        __ide_exit()\n\n    # Zeige an, welche F√§lle bereits getestet wurden und welche noch fehlen\n    remaining_cases = []\n    if not tested_positive:\n        remaining_cases.append(\"positives Gravitationsfeld\")\n    if not tested_negative:\n        remaining_cases.append(\"negatives Gravitationsfeld\")\n    if not tested_zero:\n        remaining_cases.append(\"neutrale Zone\")\n    \n    if remaining_cases:\n        case_list = \", \".join(remaining_cases)\n        __ide_prompt(f\"Navigationsanalyse erfolgreich! Du hast {expected_type}e Gravitationsfelder korrekt erkannt. Teste noch folgende Arten von Feldern: {case_list}\", \"Weiter navigieren\")\n\n# Wenn alle Tests bestanden wurden\n__ide_set_progress(True)\n__ide_prompt(\"Mission erfolgreich abgeschlossen! üéâ Die Navigation deines Raumschiffs kann nun alle Gravitationsfelder korrekt identifizieren und die entsprechenden Systeme aktivieren. Dein Raumschiff ist bereit f√ºr die interplanetare Reise!\", \"Weiter\")",
          "language": "python-pro",
          "program": "# Weltraum-Navigation: Gravitationsfeld-Analyse\n# 1. Frage nach einem Gravitationswert\n# 2. Bestimme, ob das Feld positiv, negativ oder neutral ist\n# 3. Gib die entsprechende Systemanweisung aus\n\n# TODO: Schreibe deinen Code hier\ngravitation = float(input(\"Aktueller Graviationswert:\"))"
        },
        "deps": [
          10004
        ]
      },
      {
        "filename": "Wetterstation_Alarm_1.json",
        "x": 430,
        "y": 100,
        "id": 133,
        "content": {
          "version": "v1",
          "title": "Wetterstation-Alarm 1",
          "description": "Du betreust eine automatische Wetterstation in den Bergen. Bei extremen Wetterbedingungen muss ein Alarmsignal ausgel√∂st werden, um die Bev√∂lkerung zu warnen.\n\n**Deine Aufgaben:**\n- Die Funktion `messeSturmgeschwindigkeit()` liefert die aktuelle Windgeschwindigkeit in km/h\n- Wenn die Windgeschwindigkeit 75 km/h oder mehr betr√§gt, muss eine Sturmwarnung ausgegeben werden\n- Gib \"STURMWARNUNG! Fenster und T√ºren sichern!\" aus, wenn die Bedingung eintritt\n\nTipp: Verwende eine bedingte Anweisung mit `if` und `print()`",
          "tasks": [
            {
              "title": "Sturmwarnung",
              "start": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen zur Wetterstation-√úberwachung! Du bist verantwortlich f√ºr das automatische Sturmwarnsystem.\", \"√úberwachung starten\")\n\n# Tracking-Variablen f√ºr getestete F√§lle\ntested_storm = False\ntested_normal = False\nwindspeed = 50\ndef messeSturmgeschwindigkeit():\n            return windspeed\n\nwhile not (tested_storm and tested_normal):\n    # Generiere verschiedene Windgeschwindigkeiten zum Testen\n    if not tested_normal:\n        # Teste normalen Fall\n        windspeed = 50\n    else:\n        # Teste Sturm-Fall\n        windspeed = 80\n        \n    __ide_run_client(globals=[\"messeSturmgeschwindigkeit\"])\n    \n    # Pr√ºfe die Ausgaben\n    outputs = __ide_get_outputs()\n    \n    if not tested_normal:\n        # √úberpr√ºfe normale Ausgabe\n        if len(outputs) > 0:\n            __ide_prompt(f\"Bei normalen Wetterbedingungen ({windspeed} km/h) sollte keine Warnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_normal = True\n            __ide_prompt(f\"Sehr gut! Die Windgeschwindigkeit betr√§gt {windspeed} km/h und du hast korrekt keine Warnung ausgegeben.\", \"Weiter\")\n    elif not tested_storm:\n        # √úberpr√ºfe Sturmausgabe\n        if len(outputs) == 0:\n            __ide_prompt(\"Du hast keine Ausgabe gemacht. Bei Sturm (‚â• 75 km/h) musst du eine Warnung ausgeben.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"STURMWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei starkem Wind ({windspeed} km/h) muss die Warnung \\\"STURMWARNUNG! Fenster und T√ºren sichern!\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_storm = True\n            __ide_prompt(f\"Gut gemacht! Die Windgeschwindigkeit betr√§gt {windspeed} km/h und du hast die Warnung ausgegeben.\", \"Weiter\")\n            continue\n\n__ide_set_progress(True)\n__ide_prompt(\"Herzlichen Gl√ºckwunsch! Dein Wetterstation-Alarmsystem funktioniert einwandfrei.\")",
          "language": "python-pro",
          "program": "wind = messeSturmgeschwindigkeit()\n\n# TODO\n"
        },
        "deps": [
          10004
        ]
      },
      {
        "filename": "Wetterstation_Alarm_2.json",
        "x": 530,
        "y": 250,
        "deps": [
          133
        ],
        "id": 134,
        "content": {
          "version": "v1",
          "title": "Wetterstation-Alarm 2",
          "description": "Du betreust weiterhin die automatische Wetterstation in den Bergen. Nun musst du die Alarmfunktion erweitern, um mehrere Wetterfaktoren zu ber√ºcksichtigen.\n\n**Deine Aufgaben:**\n- Die Funktion `messeSturmgeschwindigkeit()` liefert die aktuelle Windgeschwindigkeit in km/h\n- Die Funktion `messeNiederschlag()` liefert die Niederschlagsmenge in mm/h\n- Ein Unwetter liegt vor, wenn **ENTWEDER**:\n  - Die Windgeschwindigkeit 75 km/h oder mehr betr√§gt **ODER**\n  - Die Niederschlagsmenge 30 mm/h oder mehr betr√§gt\n- Gib \"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\" aus, wenn eine der Bedingungen zutrifft\n\nTipp: Verwende eine bedingte Anweisung mit `if` und den logischen Operator `or` f√ºr ODER-Verkn√ºpfungen.",
          "tasks": [
            {
              "title": "Unwetterwarnung",
              "start": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen zur erweiterten Wetterstation-√úberwachung! Du √ºberwachst nun sowohl Wind als auch Niederschlag.\", \"√úberwachung starten\")\n\n# Tracking-Variablen f√ºr getestete F√§lle\ntested_normal = False\ntested_storm_only = False\ntested_rain_only = False\n\nwind = 50\nrain = 20\n\ndef messeSturmgeschwindigkeit():\n    return wind\n\ndef messeNiederschlag():\n    return rain\n\nwhile not (tested_normal and tested_storm_only and tested_rain_only):\n    # Generiere verschiedene Wetterbedingungen zum Testen\n    if not tested_normal:\n        # Teste normalen Fall - alles ok\n        wind = 50\n        rain = 20\n    elif not tested_storm_only:\n        # Teste nur Wind - Sturm\n        wind = 80\n        rain = 20\n    elif not tested_rain_only:\n        # Teste nur Regen - Starkregen\n        wind = 50\n        rain = 35\n        \n    __ide_run_client(globals=[\"messeSturmgeschwindigkeit\", \"messeNiederschlag\"])\n    \n    # Pr√ºfe die Ausgaben\n    outputs = __ide_get_outputs()\n    \n    if not tested_normal:\n        # √úberpr√ºfe normale Ausgabe\n        if len(outputs) > 0:\n            __ide_prompt(f\"Bei normalen Wetterbedingungen (Wind: {wind} km/h, Regen: {rain} mm/h) sollte keine Warnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_normal = True\n            __ide_prompt(f\"Sehr gut! Bei normalen Bedingungen (Wind: {wind} km/h, Regen: {rain} mm/h) hast du korrekt keine Warnung ausgegeben.\", \"Weiter\")\n    elif not tested_storm_only:\n        # √úberpr√ºfe Sturmausgabe\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss eine Unwetterwarnung ausgegeben werden, auch wenn der Niederschlag normal ist.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_storm_only = True\n            __ide_prompt(f\"Gut gemacht! Du hast bei Sturm ({wind} km/h) korrekt eine Unwetterwarnung ausgegeben.\", \"Weiter\")\n    elif not tested_rain_only:\n        # √úberpr√ºfe Starkregenausgabe\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss eine Unwetterwarnung ausgegeben werden, auch wenn der Wind normal ist.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_rain_only = True\n            __ide_prompt(f\"Sehr gut! Du hast bei Starkregen ({rain} mm/h) korrekt eine Unwetterwarnung ausgegeben.\", \"Weiter\")\n\n__ide_set_progress(True)\n__ide_prompt(\"Herzlichen Gl√ºckwunsch! Dein erweitertes Wetterstation-Alarmsystem mit ODER-Verkn√ºpfung funktioniert einwandfrei.\")",
          "language": "python-pro",
          "program": "wind = messeSturmgeschwindigkeit()\nregen = messeNiederschlag()\n\n# TODO\nif wind > 75:\n    print(\"STURMWARNUNG!\")"
        }
      },
      {
        "filename": "Wetterstation_Alarm_3.json",
        "x": 490,
        "y": 420,
        "deps": [
          134
        ],
        "id": 135,
        "content": {
          "version": "v1",
          "title": "Wetterstation-Alarm 3",
          "description": "Die Wetterstation ben√∂tigt ein erweitertes Warnsystem f√ºr besondere Wetterbedingungen.\n\n**Deine Aufgaben:**\n- Die Funktion `messeSturmgeschwindigkeit()` liefert die aktuelle Windgeschwindigkeit in km/h\n- Die Funktion `messeNiederschlag()` liefert die Niederschlagsmenge in mm/h\n- Die Funktion `messeTemperatur()` liefert die aktuelle Temperatur in ¬∞C\n\n**Folgende Bedingungen m√ºssen gepr√ºft werden:**\n1. FROSTWARNUNG: Wenn die Temperatur unter dem Gefrierpunkt (< 0 ¬∞C) liegt **UND** Niederschlag vorhanden ist (> 0 mm/h)\n2. UNWETTERWARNUNG: Wenn Wind ‚â• 75 km/h **ODER** Niederschlag ‚â• 30 mm/h\n\nGib je nach Bedingung die entsprechende Warnung aus:\n- \"FROSTWARNUNG! Gl√§ttegefahr auf Stra√üen und Wegen!\"\n- \"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\"\n\nTipp: Verwende den logischen Operator `and` f√ºr UND-Verkn√ºpfungen und `or` f√ºr ODER-Verkn√ºpfungen.",
          "tasks": [
            {
              "title": "Erweitertes Alarmsystem",
              "start": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 4,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Willkommen zur erweiterten Wetterstation-√úberwachung! Du √ºberwachst nun auch Temperaturbedingungen.\", \"√úberwachung starten\")\n\n# Tracking-Variablen f√ºr getestete F√§lle\ntested_normal = False\ntested_frost = False\ntested_storm = False\ntested_rain = False\n\nwind = 50\nrain = 5\ntemp = 15\n\ndef messeSturmgeschwindigkeit():\n    return wind\n\ndef messeNiederschlag():\n    return rain\n\ndef messeTemperatur():\n    return temp\n\nwhile not (tested_normal and tested_frost and tested_storm and tested_rain):\n    # Generiere verschiedene Wetterbedingungen zum Testen\n    if not tested_normal:\n        # Teste normalen Fall - alles ok\n        wind = 50\n        rain = 5\n        temp = 15\n    elif not tested_frost:\n        # Teste Frost mit Niederschlag\n        wind = 30\n        rain = 10\n        temp = -5\n    elif not tested_storm:\n        # Teste nur Sturm\n        wind = 80\n        rain = 5\n        temp = 15\n    elif not tested_rain:\n        # Teste nur Starkregen\n        wind = 50\n        rain = 35\n        temp = 15\n        \n    __ide_run_client(globals=[\"messeSturmgeschwindigkeit\", \"messeNiederschlag\", \"messeTemperatur\"])\n    \n    # Pr√ºfe die Ausgaben\n    outputs = __ide_get_outputs()\n    \n    if not tested_normal:\n        # √úberpr√ºfe normale Ausgabe\n        if len(outputs) > 0:\n            __ide_prompt(f\"Bei normalen Wetterbedingungen (Wind: {wind} km/h, Regen: {rain} mm/h, Temp: {temp}¬∞C) sollte keine Warnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_normal = True\n            __ide_prompt(f\"Sehr gut! Bei normalen Bedingungen hast du korrekt keine Warnung ausgegeben.\", \"Weiter\")\n    elif not tested_frost:\n        # √úberpr√ºfe Frostwarnung\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Frost mit Niederschlag (Temp: {temp}¬∞C, Regen: {rain} mm/h) muss eine Frostwarnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"FROSTWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Frost mit Niederschlag (Temp: {temp}¬∞C, Regen: {rain} mm/h) muss \\\"FROSTWARNUNG! Gl√§ttegefahr auf Stra√üen und Wegen!\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_frost = True\n            __ide_prompt(f\"Sehr gut! Du hast die Frostwarnung korrekt ausgegeben.\", \"Weiter\")\n    elif not tested_storm:\n        # √úberpr√ºfe Sturmausgabe (Unwetter)\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss eine Unwetterwarnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Sturm ({wind} km/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_storm = True\n            __ide_prompt(f\"Gut gemacht! Du hast die Unwetterwarnung bei Sturm korrekt ausgegeben.\", \"Weiter\")\n    elif not tested_rain:\n        # √úberpr√ºfe Starkregenausgabe (Unwetter)\n        if len(outputs) == 0:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss eine Unwetterwarnung ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        elif \"UNWETTERWARNUNG\" not in outputs[-1]:\n            __ide_prompt(f\"Bei Starkregen ({rain} mm/h) muss die Meldung \\\"UNWETTERWARNUNG! Besondere Vorsicht bei Ausfl√ºgen\\\" ausgegeben werden.\", \"Korrigieren\")\n            __ide_exit()\n        else:\n            tested_rain = True\n            __ide_prompt(f\"Sehr gut! Du hast die Unwetterwarnung bei Starkregen korrekt ausgegeben.\", \"Weiter\")\n\n__ide_set_progress(True)\n__ide_prompt(\"Herzlichen Gl√ºckwunsch! Dein erweitertes Wetterstation-Alarmsystem funktioniert einwandfrei.\")",
          "language": "python-pro",
          "program": "wind = messeSturmgeschwindigkeit()\nregen = messeNiederschlag()\ntemperatur = messeTemperatur()\n\n# TODO\nif wind > 75 or regen > 30:\n    print(\"UNWETTERWARNUNG!\")"
        }
      }
    ],
    "x": 560,
    "y": 2240
  },
  {
    "id": 10005,
    "dirName": "040-mathematik",
    "title": "4. Mathematik üöß",
    "originalTitle": "Mathematik üöß",
    "description": "# üßÆ Kapitel 4: Mathe-Genie ‚Äì Rechnen wie ein Profi!\r\n\r\n\"Ich glaube, wir k√∂nnen jetzt etwas anspruchsvoller werden\", sagt Emi mit einem Blick zu Karol. Du bemerkst ihr kurzes Z√∂gern. \"In echten Programmen dreht sich vieles um Zahlen und Berechnungen.\"\r\n\r\nKarol streicht sich eine graue Haarstr√§hne aus dem Gesicht. \"Tats√§chlich habe ich mich k√ºrzlich mit dem goldenen Schnitt besch√§ftigt.\" Ihre H√§nde zittern leicht. \"Zu schade, dass meine Lehrer fr√ºher nie den Zusammenhang zwischen Kunst und Zahlen erkl√§rt haben.\"\r\n\r\nMax lehnt sich vor, die M√ºdigkeit in seinen Augen erkennbar. \"Meine Mutter sagt immer, dass Mathe das Herz der Programmierung ist. Letzte Woche hat sie mich beim Abendessen mit Bin√§rzahlen gel√∂chert.\" Tim wirft ihm einen besorgten Blick zu.\r\n\r\n## 1. Arithmetische Grundoperationen\r\n\r\n\"Python versteht alle Grundrechenarten:\", erkl√§rt Emi, ihre Stimme sanfter als sonst.\r\n\r\n```python\r\nprint(5 + 3)   # Addition: 8\r\nprint(10 - 4)  # Subtraktion: 6\r\nprint(2 * 6)   # Multiplikation: 12\r\nprint(8 / 2)   # Division: 4.0 (Achtung, Ergebnis ist float!)\r\n```\r\n\r\n\"Was bedeutet diese Anmerkung mit dem 'float'?\", fragst du, trotz deiner Angst, dumm zu wirken.\r\n\r\n\"Gute Frage! Bei der Division gibt Python immer eine Dezimalzahl zur√ºck, auch wenn das Ergebnis eine ganze Zahl ist.\"\r\n\r\n## 2. Punkt-vor-Strich & Klammern\r\n\r\n\"Karol, erinnerst du dich an die Regel 'Punkt vor Strich' aus der Schule?\", fragt Emi.\r\n\r\nKarol verzieht kurz das Gesicht. \"Meine Mathelehrerin war... nicht gerade ermutigend.\" Ein Schatten huscht √ºber ihr Gesicht.\r\n\r\n```python\r\nprint(3 + 4 * 2)   # 11 (nicht 14!)\r\nprint((3 + 4) * 2) # 14 ‚Äì Klammern √§ndern alles!\r\n```\r\n\r\nTim erkl√§rt leise: \"Mit Klammern kannst du die Reihenfolge √§ndern.\" Du h√∂rst den Hauch von Stolz in seiner Stimme.\r\n\r\n## 3. Turbo-Zuweisungen üöÄ\r\n\r\n```python\r\npunkte = 10\r\npunkte += 5  # √Ñquivalent zu: punkte = punkte + 5\r\nprint(punkte) # 15\r\n\r\n# Funktioniert auch mit -=, *=, /=\r\n```\r\n\r\n\"Das ist wie im Spiel!\", ruft Tim begeistert. Seine pl√∂tzliche Begeisterung l√§sst sein sch√ºchternes Wesen kurz in den Hintergrund treten.\r\n\r\n## 4. Power mit \\*\\*\r\n\r\n```python\r\nprint(2 ** 3)  # 8 (2¬≥)\r\nprint(5 ** 0.5) # Wurzel aus 5 ‚âà 2.236\r\n```\r\n\r\n\"Mit 5 hoch 0.5 kann ich Wurzeln ziehen?\", fragt Karol √ºberrascht.\r\n\r\nMax erkl√§rt: \"Die Wurzel ist dasselbe wie Potenzieren mit 1/2.\" Seine Wangen f√§rben sich leicht rot, als Emi ihm anerkennend zunickt.\r\n\r\n## 5. Mathe-Modul f√ºr Profis\r\n\r\n\"F√ºr komplexere Berechnungen brauchen wir das 'math'-Modul:\", erkl√§rt Emi, w√§hrend ihre H√§nde nerv√∂s √ºber die Tastatur huschen.\r\n\r\n```python\r\nimport math\r\n\r\n# Wurzel ziehen\r\nprint(math.sqrt(25))  # 5.0\r\n\r\n# Mit Pi rechnen\r\nradius = 3\r\numfang = 2 * math.pi * radius\r\nprint(f\"Umfang: {umfang:.2f} cm\")  # Formatierung auf 2 Nachkommastellen\r\n```\r\n\r\n\"Was bedeutet dieser Teil mit '{umfang:.2f}'?\", fragst du mit klopfendem Herzen.\r\n\r\n\"Das ist eine erweiterte Form der f-Strings. Der Teil ':.2f' bedeutet, dass wir die Zahl auf zwei Dezimalstellen formatieren.\"\r\n\r\nKarol murmelt: \"Ich habe immer auf ganze Euro-Betr√§ge gerundet, weil mir die Berechnung zu kompliziert war.\"\r\n\r\n## 6. Variablen im Einsatz\r\n\r\n\"Lass uns das Ganze praktisch anwenden\", sagt Emi.\r\n\r\n```python\r\n# Fl√§che berechnen\r\nl√§nge = 8\r\nbreite = 5\r\nfl√§che = l√§nge * breite\r\nprint(f\"Die Fl√§che betr√§gt {fl√§che} m¬≤\")  # 40 m¬≤\r\n\r\n# Der goldene Schnitt\r\nphi = (1 + math.sqrt(5)) / 2\r\nprint(f\"Der goldene Schnitt betr√§gt etwa: {phi:.3f}\")  # ungef√§hr 1.618\r\n```\r\n\r\n\"Fantastisch!\", ruft Karol. \"Wenn ich damals in der Schule gewusst h√§tte, wozu all diese abstrakten Zahlen gut sind...\"\r\n\r\n\"Ihr m√ºsst nicht alles auswendig lernen\", beruhigt Emi euch, w√§hrend sie nerv√∂s mit ihrem Armband spielt. \"Die meisten Programmierer schlagen regelm√§√üig in der Dokumentation nach.\"\r\n\r\n\"Zeit f√ºr eine Pause\", schl√§gt Karol vor und massiert ihre Schl√§fen. \"Mein alter Kopf braucht etwas Zeit zum Verarbeiten.\"\r\n\r\nDu bemerkst, wie Tim dir immer wieder nerv√∂se Blicke zuwirft, und fragst dich, ob deine Abneigung gegen Mathe vielleicht gar nicht so stark ist, wie du immer gedacht hast ‚Äì ein Gedanke, der dich gleichzeitig befreit und beunruhigt.\r\n",
    "image": "/story/4.jpg",
    "quests": [
      {
        "filename": "intro2.json",
        "x": 1080,
        "y": -140,
        "id": 110,
        "content": {
          "version": "v1",
          "title": "Magische Trankbrauerei",
          "description": "Braue den perfekten Zaubertrank! Berechne die Zutatenmengen mit Variablen:\n\n1. Nutze den vorgegebenen 'schlamm'-Wert\n2. Berechne 'pilzpulver' als ein Drittel davon\n3. Bestimme 'glitzer' als doppelte Pilzpulver-Menge\n\nDas System pr√ºft automatisch deine Rechnungen ‚óï‚Äø‚óï",
          "tasks": [
            {
              "title": "Zaubertrank-Mischung",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      2,
                      1,
                      0
                    ],
                    [
                      1,
                      3,
                      1
                    ],
                    [
                      0,
                      1,
                      2
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 3,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      2,
                      1,
                      0
                    ],
                    [
                      1,
                      3,
                      1
                    ],
                    [
                      0,
                      1,
                      2
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Der magische Kessel ist bereit!\", \"Brauen beginnen\")\n\nschlamm = random.randint(90, 210)\nerwartet_pilz = round(schlamm / 3, 2)\nerwartet_glitzer = round(erwartet_pilz * 2, 2)\n\n__ide_run_client(globals=['schlamm'])\n\nfor var in ['pilzpulver', 'glitzer']:\n    if var not in globals():\n        __ide_prompt(f\"Variable '{var}' fehlt! Bitte berechne alle Zutaten.\", \"Beenden\")\n        __ide_exit()\n\nif not abs(pilzpulver - erwartet_pilz) < 0.01:\n    __ide_prompt(f\"Pilzpulver: {schlamm} / 3 = {erwartet_pilz}, nicht {pilzpulver}\", \"Nochmal versuchen\")\n    __ide_exit()\n\nif not abs(glitzer - erwartet_glitzer) < 0.01:\n    __ide_prompt(f\"Glitzer: {erwartet_pilz} * 2 = {erwartet_glitzer}, nicht {glitzer}\", \"√úberpr√ºfen\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(f\"‚öóÔ∏è Der Trank brodelt perfekt! ({schlamm}ml Schlamm verarbeitet)\", \"Magisch!\")",
          "language": "python-pro",
          "program": "# Der magische Schlamm-Wert ist vorgegeben\npilzpulver = 0  # Ersetze 0 durch schlamm / 3\nglitzer = 0     # Ersetze 0 durch pilzpulver * 2"
        },
        "deps": [
          10005
        ]
      },
      {
        "filename": "math_module_quest.json",
        "x": 900,
        "y": -180,
        "id": 146,
        "content": {
          "version": "v1",
          "title": "Kreisberechnung",
          "description": "Karol braucht deine Hilfe bei der Kreisberechnung f√ºr ein Kunstprojekt!\n\n1. Berechne den Umfang eines Kreises mit dem gegebenen Radius\n2. Berechne die Fl√§che des Kreises\n3. Formatiere beide Ergebnisse auf 2 Nachkommastellen\n\nDer Wert von Pi ist im Math-Modul verf√ºgbar. ‚≠ï",
          "tasks": [
            {
              "title": "Kreisberechnung",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      1,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 3,
                  "y": 3,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ],
                    [
                      0,
                      1,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      1,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\nimport math\n\n__ide_prompt(\"Karol m√∂chte einen perfekten Kreis zeichnen. Hilf ihr dabei!\", \"Starten\")\n\nradius = random.randint(3, 10)\nerwarteter_umfang = round(2 * math.pi * radius, 2)\nerwartete_flaeche = round(math.pi * radius**2, 2)\n\n__ide_run_client(globals=['radius'])\n\nfor var in ['umfang', 'flaeche']:\n    if var not in globals():\n        __ide_prompt(f\"Variable '{var}' fehlt! Du musst beide Ergebnisse berechnen.\", \"Beenden\")\n        __ide_exit()\n\nif not abs(umfang - erwarteter_umfang) < 0.01:\n    __ide_prompt(f\"Der Umfang ist nicht korrekt. Bei Radius {radius} sollte er {erwarteter_umfang} betragen.\", \"Nochmal versuchen\")\n    __ide_exit()\n\nif not abs(flaeche - erwartete_flaeche) < 0.01:\n    __ide_prompt(f\"Die Fl√§che ist nicht korrekt. Bei Radius {radius} sollte sie {erwartete_flaeche} betragen.\", \"√úberpr√ºfen\")\n    __ide_exit()\n\noutputs = __ide_get_outputs()\nif len(outputs) < 2:\n    __ide_prompt(\"Du musst beide Ergebnisse ausgeben (mit print).\", \"Beenden\")\n    __ide_exit()\n\n# Pr√ºfen, ob Formatierung mit 2 Nachkommastellen erfolgt ist\nif not any(f\"{erwarteter_umfang:.2f}\" in output for output in outputs) or \\\n   not any(f\"{erwartete_flaeche:.2f}\" in output for output in outputs):\n    __ide_prompt(\"Formatiere die Ausgaben auf 2 Nachkommastellen mit ':.2f' in einem f-String.\", \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(f\"üéØ Perfekt! Mit einem Radius von {radius} hast du korrekt berechnet:\\nUmfang: {erwarteter_umfang:.2f}\\nFl√§che: {erwartete_flaeche:.2f}\", \"Geschafft!\")",
          "language": "python-pro",
          "program": "import math\n\n# Der Radius ist bereits gegeben\n\n# 1. Berechne den Umfang (2 * pi * radius)\n# Formel: umfang = 2 * math.pi * radius\numfang = 0\n\n# 2. Berechne die Fl√§che (pi * radius¬≤)\n# Formel: flaeche = math.pi * (radius ** 2)\nflaeche = 0\n\n# 3. Gib beide Ergebnisse mit 2 Nachkommastellen aus\n# Nutze f-Strings mit :.2f f√ºr 2 Nachkommastellen\nprint(f\"Umfang: {...}\")\nprint(f\"Fl√§che: {...}\")"
        },
        "deps": [
          10005
        ]
      }
    ],
    "x": 920,
    "y": 2400
  },
  {
    "id": 10006,
    "dirName": "050-schleifen",
    "title": "5. Schleifen üöß",
    "originalTitle": "Schleifen üöß",
    "description": "# üéØ Kapitel 5: Die Kunst der Wiederholung mit for & while\r\n\r\nHeute lernst du, wie man Code wiederholt ‚Äì wie ein DJ, der den perfekten Beat loopt! üéß\r\n\r\n## üß© Listen ‚Äì Deine Daten-Sammelbox\r\n\r\nStell dir eine Einkaufsliste vor, aber f√ºr Computer:\r\n\r\n```python\r\n# So erstellst du eine Liste\r\nspielkarten = [\"Herz Ass\", \"Karo K√∂nig\", \"Pik Dame\", \"Kreuz Bube\"]\r\nprimzahlen = [2, 3, 5, 7, 11]\r\nmixed_list = [42, \"Antwort\", True] # Alles m√∂gliche drin!\r\n```\r\n\r\n## üîÑ Die for-Schleife ‚Äì Dein Wiederholungs-Profi\r\n\r\n**\"F√ºr jedes Element in der Liste: Mach was damit!\"**\r\n\r\n```python\r\n# Einkaufsliste abarbeiten\r\neinkaufsliste = [\"√Ñpfel\", \"Banane\", \"Milch\"]\r\n\r\nfor produkt in einkaufsliste:\r\n    print(f\"‚úèÔ∏è Brauche noch: {produkt}\")\r\n    print(\"...auf zum n√§chsten Produkt!\\n\")\r\n```\r\n\r\n_Ausgabe:_\r\n\r\n```\r\n‚úèÔ∏è Brauche noch: √Ñpfel\r\n...auf zum n√§chsten Produkt!\r\n\r\n‚úèÔ∏è Brauche noch: Banane\r\n...auf zum n√§chsten Produkt!\r\n\r\n‚úèÔ∏è Brauche noch: Milch\r\n...auf zum n√§chsten Produkt!\r\n```\r\n\r\n**Mit Zahlen arbeiten? Klar mit range():**\r\n\r\n```python\r\n# Countdown mit Style üöÄ\r\nfor sekunde in range(5, 0, -1):\r\n    print(f\"{sekunde... Abflug!\")\r\nprint(\"üî• Liftoff!\")\r\n```\r\n\r\n## ‚è≥ Die while-Schleife ‚Äì Der Hartn√§ckige\r\n\r\n**\"Mach weiter, solange die Bedingung stimmt!\"**\r\n\r\n```python\r\n# Pizza-Back-Simulator üçï\r\ntemperatur = 20\r\nziel_temp = 220\r\n\r\nwhile temperatur < ziel_temp:\r\n    temperatur += 20\r\n    print(f\"¬∞C: {temperatur}¬∞C | Heizt auf...\")\r\n\r\nprint(\"üîî Pizza ist fertig! Buon appetito!\")\r\n```\r\n\r\n_Vorsicht:_ Vergiss nicht die Temperatur zu erh√∂hen, sonst brennt der Ofen durch! üî•\r\n\r\n## ü•ä for vs. while ‚Äì Wer wann?\r\n\r\n- **FOR:** Wenn du wei√üt, wie oft's laufen soll (z.B. Liste durchgehen)\r\n- **WHILE:** Wenn es auf eine Bedingung ankommt (z.B. Spiel l√§uft, bis Game Over)\r\n\r\n## üéØ Challenge:\r\n\r\nErrate die geheime Zahl mit nur 3 Versuchen!\r\n\r\n```python\r\ngeheimzahl = 7\r\nversuche = 3\r\n\r\nwhile versuche > 0:\r\n    raten = int(input(\"üéØ Dein Tipp (1-10): \"))\r\n    if raten == geheimzahl:\r\n        print(\"üéâ Treffer! Gewonnen!\")\r\n        break\r\n    versuche -= 1\r\n    print(f\"‚ùå Daneben! Noch {versuche} Versuche\")\r\nelse:\r\n    print(\"üò¢ Game Over! Keine Versuche mehr\")\r\n```\r\n\r\n## üí° Pro-Tipps:\r\n\r\n- `range()` kann auch so: `range(start, ende, schritt)`\r\n- Benenne Schleifen-Variablen sinnvoll:\r\n  - `for sch√ºler in klasse:` statt `for x in y:`\r\n- Breakpoint setzen? Einfach `break` schreiben!\r\n\r\nJetzt du: Erfinde deine eigenen Schleifen-Experimente! üîÑ Wie w√§r's mit einem Roboter-Tanz per Code? ü§ñüíÉüï∫\r\n",
    "image": "",
    "quests": [],
    "x": 850,
    "y": 2720
  },
  {
    "id": 10007,
    "dirName": "999-fundgrube",
    "title": "6. Weitere Themen",
    "originalTitle": "Weitere Themen",
    "description": "Hier findest du weitere Bonus-Aufgaben.\r\n",
    "image": "",
    "quests": [
      {
        "filename": "63.json",
        "x": 900,
        "y": 20,
        "id": 103,
        "content": {
          "version": "v1",
          "title": "W√ºrfel",
          "description": "Mit dem Modul `random` kannst du in Python Zufallszahlen erzeugen.\n\nBeispiel: Wenn du eine Zahl zwischen 1 und 100 erzeugen willst (beide Grenzen eingeschlossen), dann schreibe\n\n`zahl = random.randint(1, 100)`\n\nNutze dieses Wissen, um einen W√ºrfel zu programmieren und √ºberarbeite das Script auf der linken Seite.",
          "tasks": [
            {
              "title": "Neuer Auftrag",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      4,
                      4
                    ],
                    [
                      4,
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 2,
                  "offsetY": 2,
                  "data": [
                    [
                      4,
                      4
                    ],
                    [
                      4,
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_prompt(\"Ist dein W√ºrfel bereit? Auf Los wird der Test gestartet.\", \"Los\")\n__ide_karol = Robot()\n\nresults = []\n\nfor i in range(100):\n    augenzahl = None\n    __ide_run_client()\n    if not augenzahl in [1, 2, 3, 4, 5, 6]:\n        __ide_prompt(f\"Augenzahl '{augenzahl}' ung√ºltig, erwarte eine Zahl zwischen 1 und 6. Bitte √ºberarbeite dein Programm.\", \"Beenden\")\n    print(\"W√ºrfel zeigt: \" + str(augenzahl))\n    __ide_sleep(0.03)\n    results.append(augenzahl)\n\n__ide_prompt(\"W√ºrfel wurde 100 Mal geworfen.\")\n\nfor i in range(1, 7):\n    if not i in results:\n        __ide_prompt(f\"Dein W√ºrfel hat in 100 W√ºrfen keine einzige {i} gew√ºrfelt. Bitte √ºberpr√ºfe dein Programm.\", \"Beenden\")\n        __ide_karol.beenden()\n\n__ide_set_progress(True)\n__ide_prompt(\"Sehr gut! Dein W√ºrfel funktioniert!\")",
          "language": "python-pro",
          "program": "# Simuliere einen W√ºrfel. W√§hle eine zuf√§llige Zahl zwischen 1 und 6\n# und speichere sie in der Variable augenzahl.\nimport random\n\naugenzahl = 4\n"
        },
        "deps": [
          10007
        ]
      },
      {
        "filename": "62.json",
        "x": 700,
        "y": -20,
        "id": 102,
        "content": {
          "version": "v1",
          "title": "Schere, Stein, Papier",
          "description": "Karol m√∂chte mit dir eine Runde Schere, Stein, Papier spielen. Leider kann Karol nur √ºber den Code mit dir sprechen. Aber das macht nichts, du kennst dich ja mit Programmieren aus!\n\nSchaue dir das Script auf der linken Seite an und schreibe es fertig.\n\nNutze bedingte Anweisungen (`if`), um optimal zu reagieren und verwende den Vergleichsoperator `==` (zwei Gleichheitszeichen). Setze die Variable `meineWahl` so, dass du alle Runden gewinnst.\n\nKlicke `Start` um das Spiel zu starten. Viel Erfolg!",
          "tasks": [
            {
              "title": "Spielen",
              "start": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 5,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 2,
                  "dimY": 2,
                  "offsetX": 3,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      1
                    ],
                    [
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false
                    ],
                    [
                      true,
                      true,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      false,
                      false,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\nrounds = [\"schere\", \"stein\", \"papier\"]\nrandom.shuffle(rounds)\nkarolWahl = \"\"\nmeineWahl = \"\"\n\n__ide_karol = Robot()\n__ide_prompt(\"Bist du bereit?\", \"Ja!\")\n\n\ndef runRound(n):\n    global karolWahl\n    global meineWahl\n    karolWahl = rounds[n-1]\n    meineWahl = \"\"\n    __ide_prompt(f\"Runde {n}: Schere, Stein, Papier! Karol w√§hlt '{karolWahl}'.\")\n    __ide_run_client(globals=['karolWahl'])\n    if not meineWahl in [\"schere\", \"stein\", \"papier\"]:\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Das ist kein g√ºltiges Zeichen. Bitte erweitere dein Programm üöß\", 'Beenden')\n        __ide_karol.beenden()\n    # check\n    if karolWahl == meineWahl:\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}', das ist Unentschieden. Gewinne alle Runden, um die Aufgabe zu l√∂sen.\", \"Beenden\")\n        __ide_karol.beenden()\n    if (karolWahl == 'schere' and meineWahl == 'papier' or \n        karolWahl == 'stein' and meineWahl == 'schere' or\n        karolWahl == 'papier' and meineWahl == 'stein'):\n        __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Du verlierst :( Gewinne alle Runden, um die Aufgabe zu l√∂sen.\", \"Beenden\")\n        __ide_karol.beenden()\n    __ide_prompt(f\"Auf '{karolWahl}' reagierst du mit '{meineWahl}'. Du gewinnst die Runde, bravo!\", \"weiter\")\n\nrunRound(1)\nrunRound(2)\nrunRound(3)\n\n__ide_prompt(\"Gl√ºckwunsch! Du hast alle drei Runden gewonnen!\")\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Karol w√§hlt zuerst ein Zeichen und speichert es in der Variable karolWahl\n# print(karolWahl) -> \"schere\", \"stein\" oder \"papier\"\n\n# Reagiere jetzt darauf:\n\nmeineWahl = \"nichts\"\n\nif karolWahl == \"schere\":\n    meineWahl = \"papier\"\n\n"
        },
        "deps": [
          10007
        ]
      },
      {
        "filename": "65.json",
        "x": 500,
        "y": 200,
        "id": 104,
        "content": {
          "version": "v1",
          "title": "Rechenwettbewerb",
          "description": "Zumindest das sollte der Computer gut k√∂nnen: rechnen!\n\nHinweise:\n\n- `+` und `-` sind einleuchtend\n- nutze f√ºr die Multiplikation das `*`-Sternchen (Shift-Plus) \n- und f√ºr die Division den `/`-Schr√§gstrich (Alt-Gr-7)",
          "tasks": [
            {
              "title": "Die 4 Grundrechenarten",
              "start": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 8,
                "dimY": 8,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 6,
                  "offsetX": 0,
                  "offsetY": 1,
                  "data": [
                    [
                      false,
                      true,
                      false,
                      false,
                      true,
                      true,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      true,
                      false
                    ],
                    [
                      false,
                      false,
                      false,
                      false,
                      false,
                      false,
                      false
                    ],
                    [
                      false,
                      true,
                      false,
                      false,
                      false,
                      true,
                      false
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "import random\n\n__ide_prompt(\"Rechenwettbewerb startet in 3, 2, 1 ...\", \"Los!\")\n\nfor i in range(10):\n    b = random.randint(4, 14)\n    a = b * random.randint(0, 15)\n    print(f\"Runde {i + 1}: a = {a}, b = {b}\")\n    def ladeA():\n        return a\n    def ladeB():\n        return b\n    __ide_run_client(globals=['ladeA', 'ladeB'])\n    names = ['summe', 'differenz', 'produkt', 'quotient']\n    for name in names:\n        if not name in globals():\n            __ide_prompt(f\"`{name}` nicht gefunden. \" +\n                         \"Da scheint eine Variable verloren gegangen zu sein.\",\n                        \"Beenden\")\n            __ide_exit()\n    \n    if not summe == a + b:\n        __ide_prompt(f\"Oh no! {a} + {b} = {a + b}, aber deine Summe ist {summe}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not differenz == a - b:\n        __ide_prompt(f\"Oh no! {a} - {b} = {a - b}, aber deine Differenz ist {differenz}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not produkt == a * b:\n        __ide_prompt(f\"Oh no! {a} * {b} = {a * b}, aber dein Produkt ist {produkt}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n\n    if not quotient == a / b:\n        __ide_prompt(f\"Oh no! {a} / {b} = {a / b}, aber dein Quotient ist {quotient}. \" +\n                     \"Damit scheidest du leider aus dem Wettbewerb aus.\",\n                    \"Beenden\")\n        __ide_exit()\n        \n    print(\"‚úÖ\")\n    __ide_sleep(1)\n\n__ide_set_progress(True)\n__ide_prompt(\"Du hast den Wettbewerb gewonnen üèÜ!\")",
          "language": "python-pro",
          "program": "# F√ºhre mit a und b die vier Grundrechenarten aus und \n# speichere das Ergebnis in den Variablen\n\na = ladeA()\nb = ladeB()\n\n# Beispiel: a plus b\nsumme = a + b\n\n# TODO: rechne a minus b\ndifferenz = 42\n\n# TODO: rechne a mal b\nprodukt = 42\n\n# TODO: rechne a geteilt durch b\nquotient = 42\n"
        },
        "deps": [
          10007
        ]
      },
      {
        "filename": "66.json",
        "x": 700,
        "y": 200,
        "id": 105,
        "content": {
          "version": "v1",
          "title": "Small Talk",
          "description": "Mit Python gibt es neue M√∂glichkeiten der Kommunikation!\n\nHinweise:\n\n‚Ä¢ `input(\"Frage\")` erlaubt es, eine Frage zu stellen und die Antwort zu speichern.\n\n‚Ä¢ Mit `+` kannst du Texte und Variablen zu einem l√§ngeren Text verbinden.",
          "tasks": [
            {
              "title": "Hi!",
              "start": {
                "dimX": 7,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 5,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 5,
                  "offsetX": 0,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      false,
                      false,
                      true
                    ],
                    [
                      true,
                      true,
                      true,
                      false,
                      true,
                      false,
                      true
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      false
                    ],
                    [
                      true,
                      false,
                      true,
                      false,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\ninputs = __ide_get_inputs()\nif len(inputs) < 2:\n    __ide_prompt(\"Du hast nicht nach dem Hobby gefragt. Los, sei nicht sch√ºchtern! \"+\n                 \"Nutze `input()`.\",\n                 \"Beenden\")\n    __ide_exit()\n\nhobby = inputs[1]\n\noutputs = __ide_get_outputs()\nif len(outputs) < 4:\n    __ide_prompt(\"Es fehlt deine Antwort zum Hobby.\",\n                 \"Beenden\")\n    __ide_exit()\n\nlast = outputs[-1]\n\nif not hobby in last:\n    __ide_prompt(\"Das Hobby soll als Text in deiner Antwort vorkommen!\",\n                 \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)\n__ide_prompt(\"Small Talk erfolgreich ausgef√ºhrt ‚óï ‚ó° ‚óï\")",
          "language": "python-pro",
          "program": "# F√ºhre ein kleines Gespr√§che und frage nach Name und Hobby.\n\n# Beispiel\nname = input(\"Wie hei√üt du?\")\nprint(\"Hallo, \" + name + \"!\")\n\n# eine kurze Pause\nimport time; time.sleep(1.5)\n\n# TODO: Frage nach dem Hobby der Person\nhobby = \"\"\n\n# TODO: Sage was Nettes und wiederhole dabei das Hobby\n"
        },
        "deps": [
          10007
        ]
      },
      {
        "filename": "67.json",
        "x": 900,
        "y": 200,
        "id": 106,
        "content": {
          "version": "v1",
          "title": "MacDonald's Farm",
          "description": "Programmiere verschiedene Tiere und ihre Laute.\n\nHinweise:\n\n- Erstelle f√ºr jedes Tier eine eigene Funktion mit `def <name>():`\n- R√ºcke die zweite Zeile mit der Tab-Taste ein.\n- Das `return` zeigt das Ergebnis der Funktion an, schreibe hier den Laut hin.",
          "tasks": [
            {
              "title": "Katze",
              "start": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 2,
                  "data": [
                    [
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 6,
                "dimY": 6,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 5,
                  "dimY": 6,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      1,
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      1,
                      1,
                      1,
                      0
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ],
                    [
                      0,
                      1,
                      1,
                      1,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 2,
                  "data": [
                    [
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "__ide_run_client()\n\nanimals = [x for x in globals().keys() if \n           not x.startswith(\"__\") and not x == 'Robot']\n\n__ide_prompt(\"Willkommen auf MacDonald's Farm!\", \"Los\")\n\nfor animal in animals:\n    f = globals()[animal]\n    if not callable(f):\n        __ide_prompt(f\"Erwarte f√ºr '{animal}' eine Funktion. Bitte nutze `def`.\", \"Beenden\")\n        __ide_exit()\n    sound = f().title()\n    __ide_prompt(f\"Die {animal.title()} machen: {sound}, {sound}, {sound}\")\n\nif len(animals) < 4:\n    __ide_prompt(\"MacDonald f√ºhlt sich noch einsam. F√ºge weitere Tiere hinzu!\", \"Beenden\")\n    __ide_exit()\n\n__ide_set_progress(True)",
          "language": "python-pro",
          "program": "# Das sind die Tiere auf der Farm von MacDonald.\n\ndef katzen():\n    return \"miau\"\n\n# TODO: f√ºge 3 weitere Tiere hinzu\n"
        },
        "deps": [
          10007
        ]
      },
      {
        "filename": "68.json",
        "x": 500,
        "y": 340,
        "id": 107,
        "content": {
          "version": "v1",
          "title": "Codes",
          "description": "Warum es hier wohl geht? Finde es heraus!",
          "tasks": [
            {
              "title": "Hm",
              "start": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              },
              "target": {
                "dimX": 7,
                "dimY": 7,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 4,
                  "dimY": 7,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      0,
                      1,
                      1,
                      0
                    ],
                    [
                      1,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      0,
                      1
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ],
                    [
                      0,
                      0,
                      0,
                      0
                    ],
                    [
                      0,
                      0,
                      1,
                      0
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "def ladeCode(n):\n    __ide_sleep(0.2)\n    print(f\"Lade Code {n}.\")\n    __ide_sleep(0.5)\n    if n == 123:\n        __ide_prompt(\"Ein guter Anfang. Finde den n√§chsten Hinweis unter dem Code 765.\", \"Beenden\")\n        return\n\n    \n    if n == 765:\n        __ide_prompt(\"Dein n√§chster Code ist das Ergebnis von `12 * 12`.\", \"Beenden\")\n        return\n    \n    if n == 144:\n        __ide_prompt(\"Dein finaler Code ist das Ergebnis von `3 ** 5` (3 hoch 5).\", \"Beenden\")\n        return\n    \n    if n == 243:\n        __ide_set_progress(True)\n        __ide_exit()\n\n    __ide_prompt(f\"Beim Code '{n}' ist nichts zu finden.\", \"Beenden\")\n    __ide_exit()\n\n__ide_run_client(globals=['ladeCode'])",
          "language": "python-pro",
          "program": "# Starte mit dem Code 123\n\nladeCode(0)"
        },
        "deps": [
          10007
        ]
      },
      {
        "filename": "69.json",
        "x": 650,
        "y": 340,
        "id": 108,
        "content": {
          "version": "v1",
          "title": "Ausz√§hlung",
          "description": "R√§ume alle Ziegel und Marken auf und z√§hle: Jeder Ziegel z√§hlt `plus 1`, jede Marke `minus 1`.\n\nLege am Ende einen Ziegelstapel in der passenden H√∂he.",
          "tasks": [
            {
              "title": "Welt 1",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      2,
                      0,
                      2
                    ]
                  ]
                },
                "marks": {
                  "dimX": 3,
                  "dimY": 1,
                  "offsetX": 5,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 8,
                  "y": 1,
                  "dir": "north"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      1
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            },
            {
              "title": "Welt 2",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 1,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      1,
                      2,
                      3,
                      3,
                      2,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 8,
                  "y": 1,
                  "dir": "north"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      5
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            },
            {
              "title": "Welt 3",
              "start": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 0,
                  "y": 0,
                  "dir": "south"
                },
                "bricks": {
                  "dimX": 6,
                  "dimY": 1,
                  "offsetX": 2,
                  "offsetY": 1,
                  "data": [
                    [
                      3,
                      0,
                      1,
                      1,
                      2,
                      1
                    ]
                  ]
                },
                "marks": {
                  "dimX": 5,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 1,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      false,
                      true
                    ]
                  ]
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              },
              "target": {
                "dimX": 9,
                "dimY": 2,
                "height": 6,
                "karol": {
                  "x": 6,
                  "y": 1,
                  "dir": "east"
                },
                "bricks": {
                  "dimX": 1,
                  "dimY": 1,
                  "offsetX": 8,
                  "offsetY": 0,
                  "data": [
                    [
                      4
                    ]
                  ]
                },
                "marks": {
                  "offsetX": -1,
                  "offsetY": -1,
                  "dimX": 0,
                  "dimY": 0,
                  "data": []
                },
                "blocks": {
                  "dimX": 7,
                  "dimY": 1,
                  "offsetX": 1,
                  "offsetY": 0,
                  "data": [
                    [
                      true,
                      true,
                      true,
                      true,
                      true,
                      true,
                      true
                    ]
                  ]
                }
              }
            }
          ],
          "lng": "de",
          "editOptions": "python-pro-only",
          "questScript": "",
          "language": "python-pro",
          "program": "karol = Robot()\n\n"
        },
        "deps": [
          10007
        ]
      }
    ],
    "x": 480,
    "y": 2850
  }
]

// Generate chaptersMap based on chapter information
export const chaptersMap: {
  [key: number]: OverviewMapData
} = {}

export const chapterOverviewData: {
  title: string
  titleEn: string
  quests: number[]
}[] = []

// Generate chapterQuests based on chapter information
export const chapterQuests: { [key: number]: QuestData } = {}

// Generate chapterData based on chapter information
export const chapterData: { [key: number]: { title: string, description: string, image: string } } = {}

// Populate the exported objects
chapterInfo.forEach((chapter) => {
  // Add chapter to chapterData
  chapterData[chapter.id] = {
    title: chapter.title,
    description: chapter.description,
    image: chapter.image,
  }

  // Default chapter position and dependencies
  chaptersMap[chapter.id] = {
    x: chapter.x,
    y: chapter.y,
    deps: chapter.id == 10001 ? []  : [chapter.id - 1],
  }
  
  const title = `${chapter.title}`

  const c = {
    title,
    titleEn: title,
    quests: [] as number[],
  }

  // Add quests from this chapter to chapterQuests
  chapter.quests.forEach((quest) => {
    const questId = quest.id
    chapterQuests[questId] = deserializeQuestToData(quest.content as any)
    chaptersMap[questId] = {
      x: quest.x,
      y: quest.y + chapter.y,
      deps: quest.deps,
      chapter: chapter.id,
    }
    c.quests.push(questId)
  })
  chapterOverviewData.push(c)
})
