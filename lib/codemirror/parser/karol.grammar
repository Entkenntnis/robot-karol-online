@top Program {
  (expression | Cmd)*
}

expression {
  Command |
  Repeat |
  IfThen |
  CustomRef |
  Return
}

Return {
  @specialize<idx, "return"> |
  @specialize<idx, "Return">
}

Command {
  (KarolPrefix ".")? ((commandPure (openPar closePar)?) | (commandWithParameter (openPar Parameter? closePar)?))
}

commandWithParameter {
  @specialize<idx, "Schritt"> |
  @specialize<idx, "schritt"> |
  @specialize<idx, "Hinlegen"> |
  @specialize<idx, "hinlegen"> |
  @specialize<idx, "Aufheben"> |
  @specialize<idx, "aufheben">
}

commandPure {
  @specialize<idx, "LinksDrehen"> |
  @specialize<idx, "linksdrehen"> |
  @specialize<idx, "linksDrehen"> |
  @specialize<idx, "Linksdrehen"> |
  @specialize<idx, "RechtsDrehen"> |
  @specialize<idx, "rechtsdrehen"> |
  @specialize<idx, "rechtsDrehen"> |
  @specialize<idx, "Rechtsdrehen"> |
  @specialize<idx, "MarkeSetzen"> |
  @specialize<idx, "markesetzen"> |
  @specialize<idx, "markeSetzen"> |
  @specialize<idx, "Markesetzen"> |
  @specialize<idx, "MarkeLöschen"> |
  @specialize<idx, "markelöschen"> |
  @specialize<idx, "markeLöschen"> |
  @specialize<idx, "Markelöschen"> |
  @specialize<idx, "Beenden"> |
  @specialize<idx, "beenden">
}

Repeat {
  RepeatStart ((RepeatWhileKey Condition) | (Times RepeatTimesKey)) expression* RepeatEnd
}

RepeatStart[closedBy="RepeatEnd"] {
  @specialize<idx, "wiederhole"> | 
  @specialize<idx, "Wiederhole">
}

RepeatEnd {
  @specialize<idx, "endewiederhole"> |
  @specialize<idx, "endeWiederhole"> |
  @specialize<idx, "EndeWiederhole"> |
  @specialize<idx, "EndeWiederhole"> |
  legacyRepeatEnd
}

RepeatWhileKey {
  @specialize<idx, "solange"> |
  @specialize<idx, "Solange">
}

RepeatTimesKey {
  @specialize<idx, "mal"> |
  @specialize<idx, "Mal">
}

Parameter {
  number
}

Times {
  number
}

Condition {
  @specialize<idx, "IstWand"> |
  @specialize<idx, "istwand"> |
  @specialize<idx, "Istwand"> |
  @specialize<idx, "istWand"> |
  @specialize<idx, "NichtIstWand"> |
  @specialize<idx, "nichtistwand"> |
  @specialize<idx, "Nichtistwand"> |
  @specialize<idx, "IstZiegel"> |
  @specialize<idx, "istziegel"> |
  @specialize<idx, "istZiegel"> |
  @specialize<idx, "Istziegel"> |
  @specialize<idx, "NichtIstZiegel"> |
  @specialize<idx, "nichtistziegel"> |
  @specialize<idx, "Nichtistziegel"> |
  @specialize<idx, "IstMarke"> |
  @specialize<idx, "istmarke"> |
  @specialize<idx, "istMarke"> |
  @specialize<idx, "Istmarke"> |
  @specialize<idx, "NichtIstMarke"> |
  @specialize<idx, "nichtistmarke"> |
  @specialize<idx, "Nichtistmarke">
}

IfThen {
  IfKey Condition ThenKey expression* (ElseKey expression*)? IfEndKey
}

IfKey[closedBy="IfEndKey"] {
  @specialize<idx, "wenn"> |
  @specialize<idx, "Wenn">
}

ThenKey { 
  @specialize<idx, "dann"> |
  @specialize<idx, "Dann">
}

IfEndKey {
  @specialize<idx, "endewenn"> |
  @specialize<idx, "endeWenn"> |
  @specialize<idx, "Endewenn"> |
  @specialize<idx, "EndeWenn"> |
  legacyIfEndKey
}

ElseKey {
  @specialize<idx, "sonst"> |
  @specialize<idx, "Sonst">
}

Cmd {
  CmdStart CmdName expression* CmdEnd
}

CmdName {
  idx
}

CmdStart[closedBy="CmdEnd"] { 
  @specialize<idx, "Anweisung"> | 
  @specialize<idx, "anweisung"> 
}

CmdEnd { 
  @specialize<idx, "endeAnweisung"> | 
  @specialize<idx, "endeanweisung"> | 
  @specialize<idx, "EndeAnweisung"> | 
  @specialize<idx, "Endeanweisung"> | 
  legacyCmdEnd 
}

CustomRef { idx }

@tokens {
  legacyRepeatEnd { "*wiederhole" | "*Wiederhole" }

  legacyIfEndKey { "*wenn" | "*Wenn" }

  legacyCmdEnd { "*anweisung" | "*Anweisung" }

  KarolPrefix { "karol" | "Karol" }

  "."

  openPar { "(" }

  closePar { ")" }

  @precedence { KarolPrefix, idx}

  whitespace { $[ \n\r\t]+ }

  number { $[0-9]+ }

  idx { $[0-9A-Za-zäüöÄÜÖß_]+ }

  @precedence { number, idx }

  LineComment { "//" ![\n]* }

  PythonComment { "#" ![\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }
}

@external tokens nestedComment from "./nestedComment" { Comment }

@skip { Comment | whitespace | LineComment | PythonComment | BlockComment | ";" }