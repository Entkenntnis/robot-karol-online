name: Build and Release MSI

on:
  release:
    types: [published]
  workflow_dispatch:


jobs:
  build:
    runs-on: windows-latest
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js (adjust the node version as needed)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      # Cache npm dependencies to speed up installs
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: npm-${{ hashFiles('package-lock.json') }}

      # Cache Cargo dependencies to speed up Rust builds
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
          key: cargo-${{ hashFiles('src-tauri/Cargo.lock', 'src-tauri/Cargo.toml') }}

      # Update config.tauri.json with the latest release tag
      - name: Update config.tauri.json with release tag
        shell: pwsh
        run: |
          # Extract the tag from the Git ref (e.g. "refs/tags/v1.2.3" becomes "v1.2.3")
          $tag = '${{ github.ref }}'.Split("/")[-1]
          if ($tag.StartsWith("v")) {
            $tag = $tag.Substring(1)
          }
          Write-Host "Using tag: $tag"
          # Read the config file, update the version property, and write it back
          $config = Get-Content src-tauri\tauri.conf.json | ConvertFrom-Json
          $config.version = $tag
          $config | ConvertTo-Json -Depth 10 | Out-File src-tauri\tauri.conf.json

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Build the MSI using Tauri (assumes "tauri build" script is defined in package.json)
      - name: Build MSI with Tauri
        run: npm run tauri build

      - name: Find MSI file
        id: find_msi
        shell: bash
        run: |
          msi_file=$(find ./src-tauri/target -type f -name "*.msi" | head -n 1)
          echo "Installer: $msi_file"
          echo "msi_file=$msi_file" >> $GITHUB_OUTPUT
          
      # Upload the MSI file to the GitHub release using softprops/action-gh-release@v2
      - name: Upload MSI to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_msi.outputs.msi_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
