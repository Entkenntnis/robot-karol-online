const fs = require('fs')
const path = require('path')

// Path to the source and output files
const figureGalleryPath = path.join(__dirname, '..', 'FIGUREN-GALERIE.md')
const outputPath = path.join(
  __dirname,
  '..',
  'lib',
  'data',
  'robotImageDictionary.ts'
)

// Function to extract the last few bytes from a base64 URL
function extractKeyFromUrl(url) {
  // Extract the base64 data from the URL
  const base64Match = url.match(/base64,([^)]+)/)
  if (!base64Match || !base64Match[1]) {
    return null
  }

  // Extract the last part of the base64 string (the key used in the dictionary)
  const base64Data = base64Match[1]
  return base64Data.substring(base64Data.length - 50)
}

// Function to extract robot name from heading
function extractRobotName(heading) {
  const match = heading.match(/### ([^\[]+)/)
  return match ? match[1].trim() : 'Unknown Robot'
}

// Main function to generate the dictionary
async function generateDictionary() {
  try {
    // Read the figure gallery file
    const galleryContent = fs.readFileSync(figureGalleryPath, 'utf8')

    // Split content by robot entries (look for headings)
    const robotEntries = galleryContent
      .split(/(?=### )/g)
      .filter((entry) => entry.includes('LADEN'))

    // Process each entry to extract the robot name and base64 key
    const robotDictionary = {}

    robotEntries.forEach((entry) => {
      // Extract robot name
      const name = extractRobotName(entry)

      // Extract URL with base64 data
      const urlMatch = entry.match(/\[LADEN\]\(([^)]+)\)/)
      if (!urlMatch) return

      const url = urlMatch[1]
      const key = extractKeyFromUrl(url)

      if (key) {
        robotDictionary[key] = name
      }
    })

    // Generate the TypeScript file content
    const fileContent = `// Generated by scripts/generate-dictionary.js
export const robotImageDictionary: { [key: string]: string } = ${JSON.stringify(
      robotDictionary,
      null,
      2
    )};
`

    // Write the file
    fs.writeFileSync(outputPath, fileContent)

    console.log(
      `Dictionary generated successfully with ${
        Object.keys(robotDictionary).length
      } entries!`
    )
  } catch (error) {
    console.error('Error generating dictionary:', error)
  }
}

// Run the generator
generateDictionary()
